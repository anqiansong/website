"use strict";(self.webpackChunkkeson_cn=self.webpackChunkkeson_cn||[]).push([[9450],{6029:function(n){n.exports=JSON.parse('{"blogPosts":[{"id":"/tool/github-compare","metadata":{"permalink":"/tool/github-compare","source":"@site/blog/tool/github-compare.md","title":"GitHub \u4ed3\u5e93\u5bf9\u6bd4\u5de5\u5177 \u2014\u2014\u2014\u2014 github-compare","description":"preview","date":"2022-05-25T00:00:00.000Z","formattedDate":"2022\u5e745\u670825\u65e5","tags":[{"label":"go","permalink":"/tags/go"},{"label":"tool","permalink":"/tags/tool"},{"label":"github","permalink":"/tags/github"},{"label":"cli","permalink":"/tags/cli"}],"readingTime":2.7733333333333334,"truncated":true,"authors":[{"name":"Keson","title":"\u5b57\u8282\u8df3\u52a8\u5f00\u53d1\u5de5\u7a0b\u5e08 /  goctl \u7ef4\u62a4\u4eba","url":"https://github.com/anqiansong","imageURL":"/img/logo.webp","key":"keson"}],"frontMatter":{"title":"GitHub \u4ed3\u5e93\u5bf9\u6bd4\u5de5\u5177 \u2014\u2014\u2014\u2014 github-compare","date":"2022-05-25T00:00:00.000Z","authors":"keson","tags":["go","tool","github","cli"]},"nextItem":{"title":"\u51e4\u51f0\u67b6\u6784\u5b66\u4e60\u7b14\u8bb0\u2014\u2014\u6f14\u8fdb\u4e2d\u7684\u67b6\u6784","permalink":"/arch/icyfenix-one"}},"content":"![preview](../resource/202205/github-compare.png)\\n\\n\u6211\u4eec\u5728\u505a\u6846\u67b6\u8c03\u7814\u65f6\uff0c\u4f60\u53ef\u80fd\u4f1a\u5148\u901a\u8fc7 google \u53bb\u641c\u7d22\u76f8\u5173\u5173\u952e\u8bcd\u5f97\u5230\u4e00\u4e9b\u7ed3\u679c\uff0c\u5176\u6b21\u662f\u4ece GitHub \u67e5\u770b\u76f8\u5e94\u7684 Topic \u6765\u9009\u62e9\u5408\u9002\u7684\u6846\u67b6\u3002\u76f8\u4fe1\u5927\u591a\u6570\u4eba\\n\u5728\u9009\u62e9\u6846\u67b6\u65f6\uff0c\u4e0d\u4f1a\u968f\u968f\u4fbf\u4fbf\u5c31\u62ff\u6765\u7528\uff0c\u800c\u662f\u67e5\u770b\u4e00\u4e9b\u8be5\u4ed3\u5e93\u7684\u6307\u6807\u6765\u51b3\u5b9a\u662f\u5426\u9009\u62e9\uff0c\u6216\u8005\u5bf9\u591a\u6846\u67b6\u8fdb\u884c\u5bf9\u6bd4\u3002\\n\\n\x3c!-- truncate --\x3e\\n\\n# \u524d\u8a00\\n\\n\u6211\u4eec\u77e5\u9053\uff0c\u5728\u793e\u533a\u76ee\u524d\u5df2\u7ecf\u6709\u4e86\u4e00\u4e9b\u7f51\u9875\u7684\u5bf9\u6bd4\u5de5\u5177\uff0c\u5982\uff1a\u67e5\u770b star \u8d8b\u52bf\u56fe\u7684 `star-history`\uff0c\u800c\u5728\u7ec8\u7aef\u4e0a\u76ee\u524d\u6ca1\u6709\u9009\u62e9\u5230\u9002\u5408\u5de5\u5177\u8fdb\u884c GitHub \u4ed3\u5e93\u7684\\n\u6570\u636e\u67e5\u770b\uff0c\u6211\u4eec\u901a\u5e38\u5728\u67e5\u770b\u4e00\u4e2a\u4ed3\u5e93\u65f6\uff0c\u901a\u5e38\u4f1a\u67e5\u770b\u4ee5\u4e0b\u4e00\u4e9b\u6307\u6807\u6765\u603b\u548c\u8861\u91cf\u5176\u7a33\u5b9a\u4e0e\u5426\uff1f\\n- star \u6570\u91cf(stars)\\n- \u66f4\u65b0\u9891\u7387(releases)\\n- \u793e\u533a\u6d3b\u8dc3\u5ea6(contributors)\\n- issue \u7684\u89e3\u51b3\u5468\u671f(remain issues)\\n- \u4ed3\u5e93\u521b\u5efa\u65f6\u957f(age)\\n- \u7ec4\u7ec7(organization)\\n\\n\u6211\u4eec\u4ee5\u9009\u62e9 Golang \u5fae\u670d\u52a1\u6846\u67b6\u4e3a\u4f8b\u5b50\uff0c\u6765\u5bf9\u6bd4\u4e00\u4e0b\u5f53\u524d\u793e\u533a\u6bd4\u8f83\u706b\u7684\u4e00\u4e9b\u6846\u67b6\\n- go-zero\\n- kratos\\n- go-micro\\n- kit\\n\\n\u5728\u6ca1\u6709\u5de5\u5177\u524d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u6bcf\u4e2a\u4ed3\u5e93\u4f9d\u6b21\u4ece\u4ee5\u4e0a\u5404\u6307\u6807\u53bb\u5176\u4ed3\u5e93\u9996\u9875\u770b\u4e00\u4e0b\u76f8\u5173\u6570\u636e\uff0c\u8fd9\u4f1a\u663e\u5f97\u6bd4\u8f83\u7e41\u7410\uff0c\u5982\u679c\u9700\u8981\u843d\u5730\u6210\u4e3a\u4e00\u4e9b\u5bf9\u6bd4\u6570\u636e\uff0c\u5219\u66f4\u9700\u8981\u81ea\u5df1\u624b\u52a8\u53bb\\n\u7f16\u5199\u4e00\u4e2a\u8868\u683c\u3002\\n\\n\u6211\u4eec\u6765\u770b\u4e00\u4e0b [github-compare](https://github.com/anqiansong/github-compare) \u7684\u5bf9\u6bd4\u7ed3\u679c\uff1a\\n\\n![github-compare-result](../resource/202205/github-compare-preview.png)\\n\\n\u901a\u8fc7\u8be5\u56fe\u53ef\u4ee5\u5f88\u6e05\u6670\u7684\u770b\u5230 GitHub \u4ed3\u5e93\u7684\u5404\u9879\u6307\u6807\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8be5\u5de5\u5177\u7684\u4f7f\u7528\u3002\\n\\n# github-compare\\n\u5b9a\u4f4d\u4e3a\u4e00\u4e2a GitHub \u4ed3\u5e93\u5bf9\u6bd4\u5de5\u5177\\n\\n## \u4ed3\u5e93\u5730\u5740\\nhttps://github.com/anqiansong/github-compare\\n\\n## \u5b89\u88c5\\n\\n```bash\\n$ go install github.com/anqiansong/github-compare@latest\\n```\\n\\n## \u793a\u4f8b\\n### TermUI\\n\\n#### \u5355\u4ed3\u5e93\\n```bash\\n$ github-compare spf13/cobra\\n```\\n\\n![repo-detail](../resource/202205/repo-detail.png)\\n\\n#### \u591a\u4ed3\u5e93\\n\\n```bash\\n$ github-compare spf13/cobra urfave/cli junegunn/fzf antonmedv/fx\\n```\\n\\n![preview](../resource/202205/compare-preview.png)\\n\\n### JSON\u89c6\u56fe\\n\\n```bash\\n$ github-compare spf13/cobra --json                                           \\n[\\n  {\\n    \\"age\\": \\"3191 days\\",\\n    \\"avgReleasePeriod\\": \\"199 days\\",\\n    \\"contributorCount\\": \\"246\\",\\n    \\"forkCount\\": \\"2331(0/d)\\",\\n    \\"fullName\\": \\"spf13/cobra\\",\\n    \\"homepage\\": \\"https://cobra.dev\\",\\n    \\"issue\\": \\"0/893\\",\\n    \\"language\\": \\"Go\\",\\n    \\"lastPushedAt\\": \\"15 hour(s) ago\\",\\n    \\"latestReleaseAt\\": \\"2 month(s) ago\\",\\n    \\"lastUpdatedAt\\": \\"3 minute(s) ago\\",\\n    \\"latestDayStarCount\\": \\"13 \u21c8\\",\\n    \\"latestMonthStarCount\\": \\"455\\",\\n    \\"latestWeekStarCount\\": \\"93 \u21ca\\",\\n    \\"license\\": \\"Apache License 2.0\\",\\n    \\"pull\\": \\"56/809\\",\\n    \\"releaseCount\\": \\"16\\",\\n    \\"starCount\\": \\"26807(8/d)\\",\\n    \\"watcherCount\\": \\"349\\",\\n    \\"description\\": \\"A Commander for modern Go CLI interactions\\",\\n    ...\\n]\\n```\\n\\n### YAML\u89c6\u56fe\\n\\n```bash\\n$ github-compare spf13/cobra --yaml                                           \\n- age: 3191 days\\n  avgreleaseperiod: 199 days\\n  contributorcount: \\"246\\"\\n  forkcount: 2331(0/d)\\n  fullname: spf13/cobra\\n  homepage: https://cobra.dev\\n  issue: 0/893\\n  language: Go\\n  lastpushedat: 15 hour(s) ago\\n  latestreleaseat: 2 month(s) ago\\n  lastupdatedat: 7 minute(s) ago\\n  latestdaystarcount: 13 \u21c8\\n  latestmonthstarcount: \\"455\\"\\n  latestweekstarcount: 93 \u21ca\\n  license: Apache License 2.0\\n  pull: 56/809\\n  releasecount: \\"16\\"\\n  starcount: 26807(8/d)\\n  watchercount: \\"349\\"\\n  description: A Commander for modern Go CLI interactions\\n  ...\\n```\\n\\n### Export as a csv file\\n\\n```bash\\n$ github-compare spf13/cobra urfave/cli junegunn/fzf antonmedv/fx -f data.csv\\n```\\n\\n![csv](../resource/202205/compare-csv.png)\\n\\n\\n## \u7528\u6cd5\\n\\n### \u51c6\u5907\u5de5\u4f5c\\n1. \u70b9\u51fb\u53bb GitHub [\u521b\u5efa\u4e2a\u4eba AccessToken](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)\\n2. \u8bbe\u7f6e AccessToken\\n    -  \u590d\u5236 AccessToken \u5e76\u6dfb\u52a0\u5230\u73af\u5883\u53d8\u91cf\\n    -  \u6216\u8005\u4f60\u53ef\u4ee5\u5728\u6267\u884c `github-compare` \u6307\u4ee4\u65f6\u901a\u8fc7 `--token` \u663e\u5f0f\u4f20\u5165\\n\\n### \u6267\u884c\u547d\u4ee4\\n\\n```bash\\n# \u901a\u8fc7 --token \u4f20\u5165 AccessToken\\n# github-compare zeromicro/go-zero go-kratos/kratos asim/go-micro go-kit/kit --token ${accessToken}\\n#  \u6216\u8005\u6dfb\u52a0\u5230\u73af\u5883\u53d8\u91cf(\u63a8\u8350)\\n$ export GITHUB_ACCESS_TOKEN=${GITHUB_ACCESS_TOKEN}\\n$ github-compare zeromicro/go-zero go-kratos/kratos asim/go-micro go-kit/kit\\n```\\n\\n## \u6307\u4ee4\\n\\n```bash\\n$ github-compare -h                                                    \\nA GitHub repositories statistics command-line tool for the terminal\\n\\nUsage:\\n  github-compare [flags]\\n\\nFlags:\\n  -f, --file string    output to a specified file\\n  -h, --help           help for github-compare\\n      --json           print with json style\\n  -t, --token string   github access token\\n      --ui             print with term ui style(default) (default true)\\n  -v, --version        version for github-compare\\n      --yaml           print with yaml style\\n```\\n\\n## \u8bf4\u660e\\n\\n1. GitHub AccessToken \u662f\u5fc5\u586b\u9879\u3002\\n2. `github-compare` \u63a5\u53d7 1 \u5230 4 \u4e2a\u4ed3\u5e93\u8fdb\u884c\u6570\u636e\u67e5\u8be2\u3002\\n3. \u5982\u679c\u4f60\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6765\u8bbe\u7f6e AccessToken, \u73af\u5883\u53d8\u91cf\u7684 key \u5fc5\u987b\u4e3a `GITHUB_ACCESS_TOKEN`\u3002\\n\\n## \u6700\u540e\\n\u5982\u679c\u8be5\u5de5\u5177\u5bf9\u4f60\u6709\u7528\uff0c\u53ef\u4ee5\u7ed9\u4e2a [![](https://img.shields.io/github/stars/anqiansong/github-compare?style=social)](https://github.com/anqiansong/github-compare) \u54e6"},{"id":"/arch/icyfenix-one","metadata":{"permalink":"/arch/icyfenix-one","source":"@site/blog/arch/icyfenix-one.md","title":"\u51e4\u51f0\u67b6\u6784\u5b66\u4e60\u7b14\u8bb0\u2014\u2014\u6f14\u8fdb\u4e2d\u7684\u67b6\u6784","description":"cover","date":"2022-05-17T00:00:00.000Z","formattedDate":"2022\u5e745\u670817\u65e5","tags":[{"label":"\u67b6\u6784","permalink":"/tags/\u67b6\u6784"}],"readingTime":11.7,"truncated":true,"authors":[{"name":"Keson","title":"\u5b57\u8282\u8df3\u52a8\u5f00\u53d1\u5de5\u7a0b\u5e08 /  goctl \u7ef4\u62a4\u4eba","url":"https://github.com/anqiansong","imageURL":"/img/logo.webp","key":"keson"}],"frontMatter":{"title":"\u51e4\u51f0\u67b6\u6784\u5b66\u4e60\u7b14\u8bb0\u2014\u2014\u6f14\u8fdb\u4e2d\u7684\u67b6\u6784","date":"2022-05-17T00:00:00.000Z","authors":"keson","tags":["\u67b6\u6784"]},"prevItem":{"title":"GitHub \u4ed3\u5e93\u5bf9\u6bd4\u5de5\u5177 \u2014\u2014\u2014\u2014 github-compare","permalink":"/tool/github-compare"},"nextItem":{"title":"grpc \u6e90\u7801\u9605\u8bfb\u4e4b balancer","permalink":"/go/grpc-balaner"}},"content":"import useBaseUrl from \'@docusaurus/useBaseUrl\';\\n\\n![cover](../resource/202205/icyfenix-one.svg)\\n\\n\u8f6f\u4ef6\u67b6\u6784\u98ce\u683c\u4ece\u5927\u578b\u673a\uff08Mainframe\uff09\uff0c\u5230\u539f\u59cb\u5206\u5e03\u5f0f\uff08Distributed\uff09\uff0c\u5230\u5927\u578b\u5355\u4f53\uff08Monolithic\uff09\uff0c\u5230\u9762\u5411\u670d\u52a1\uff08Service-Oriented\uff09\uff0c\\n\u5230\u5fae\u670d\u52a1\uff08Microservices\uff09\uff0c\u5230\u670d\u52a1\u7f51\u683c\uff08Service Mesh\uff09\uff0c\u5230\u65e0\u670d\u52a1\uff08Serverless\uff09\u2026\u2026\u6280\u672f\u67b6\u6784\u4e0a\u786e\u5b9e\u5448\u73b0\u51fa\u201c\u4ece\u5927\u5230\u5c0f\u201d\u7684\u53d1\u5c55\u8d8b\u52bf\u3002\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u5355\u4f53\u67b6\u6784(Monolithic)\\n\\n:::tip \u5355\u4f53\u67b6\u6784\\n\u201c\u5355\u4f53\u201d\u53ea\u662f\u8868\u660e\u7cfb\u7edf\u4e2d\u4e3b\u8981\u7684\u8fc7\u7a0b\u8c03\u7528\u90fd\u662f\u8fdb\u7a0b\u5185\u8c03\u7528\uff0c\u4e0d\u4f1a\u53d1\u751f\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c\u4ec5\u6b64\u800c\u5df2\u3002\\n:::\\n\\n\u201c\u5355\u4f53\u67b6\u6784\u201d\u5728\u6574\u4e2a\u8f6f\u4ef6\u67b6\u6784\u6f14\u8fdb\u7684\u5386\u53f2\u8fdb\u7a0b\u91cc\uff0c\u662f\u51fa\u73b0\u65f6\u95f4\u6700\u65e9\u3001\u5e94\u7528\u8303\u56f4\u6700\u5e7f\u3001\u4f7f\u7528\u4eba\u6570\u6700\u591a\u3001\u7edf\u6cbb\u5386\u53f2\u6700\u957f\u7684\u4e00\u79cd\u67b6\u6784\u98ce\u683c\uff0c\u4f46\u201c\u5355\u4f53\u201d\u8fd9\u4e2a\u540d\u79f0\uff0c\u5374\u662f\u5728\u5fae\u670d\\n\u52a1\u5f00\u59cb\u6d41\u884c\u4e4b\u540e\u624d\u201c\u4e8b\u540e\u8ffd\u8ba4\u201d\u6240\u5f62\u6210\u7684\u6982\u5ff5\\n\\n### \u5355\u4f53\u67b6\u6784\u7684\u7279\u70b9\\n- \u6613\u5f00\u53d1\\n- \u6613\u6d4b\u8bd5\\n- \u6613\u90e8\u7f72\\n- \u8fdb\u7a0b\u5185\u901a\u4fe1\\n\\n\u4e8b\u52a1\u5177\u6709\u53cc\u9762\u6027\uff0c\u6709\u5176\u4f18\u52bf\u90a3\u5fc5\u7136\u5b58\u5728\u4e0d\u8db3\uff1a\\n- \u8f6f\u4ef6\u6027\u80fd\u63d0\u5347\u7a7a\u95f4\u6709\u9650\uff1a \u53d7\u5355\u673a\u8d44\u6e90\u9650\u5236\\n- \u5c40\u4fc3\u7684\u6cbb\u7406\u89c4\u5219\uff1a\u6bd4\u8f83\u660e\u663e\u7684\u5c31\u662f\u6545\u969c\u9694\u79bb\uff0c\u4e00\u65e6\u8fdb\u7a0b\u5185\u67d0\u4e2a\u6a21\u5757\u51fa\u73b0\u5185\u5b58\u3001\u7ebf\u7a0b\u6cc4\u9732\uff0c\u8fdb\u7a0b\u963b\u585e\uff0c\u6b7b\u5faa\u73af\u7b49\u95ee\u9898\uff0c\u90fd\u5c06\u5f71\u54cd\u6574\u4e2a\u7a0b\u5e8f\\n- \u53ef\u7ef4\u62a4\u6027/\u7a33\u5b9a\u6027\u4f4e\uff1a\u7531\u4e8e\u5355\u673a\u8d44\u6e90\u6709\u9650\u548c\u6545\u969c\u9694\u79bb\u8f83\u5f31\u76f4\u63a5\u5bfc\u81f4\u6574\u4e2a\u5e94\u7528\u7684\u53ef\u7ef4\u62a4\u6027\u548c\u7a33\u5b9a\u6027\u504f\u5f31\\n\\n\\n\u4e3a\u4e86\u5141\u8bb8\u7a0b\u5e8f\u51fa\u9519\uff0c\u4e3a\u4e86\u83b7\u5f97\u9694\u79bb\u3001\u81ea\u6cbb\u7684\u80fd\u529b\uff0c\u4e3a\u4e86\u53ef\u4ee5\u6280\u672f\u5f02\u6784\u7b49\u76ee\u6807\uff0c\u662f\u7ee7\u4e3a\u4e86\u6027\u80fd\u4e0e\u7b97\u529b\u4e4b\u540e\uff0c\u8ba9\u7a0b\u5e8f\u518d\u6b21\u9009\u62e9\u5206\u5e03\u5f0f\u7684\u7406\u7531\u3002\u7136\u800c\uff0c\u5f00\u53d1\u5206\u5e03\u5f0f\u7a0b\u5e8f\u4e5f\\n\u5e76\u4e0d\u610f\u5473\u7740\u4e00\u5b9a\u8981\u4f9d\u9760\u4eca\u5929\u7684\u5fae\u670d\u52a1\u67b6\u6784\u624d\u80fd\u5b9e\u73b0\u3002\u5728\u65b0\u65e7\u4e16\u7eaa\u4e4b\u4ea4\uff0c\u4eba\u4eec\u66fe\u7ecf\u63a2\u7d22\u8fc7\u51e0\u79cd\u670d\u52a1\u62c6\u5206\u65b9\u6cd5\uff0c\u5c06\u4e00\u4e2a\u5927\u7684\u5355\u4f53\u7cfb\u7edf\u62c6\u5206\u4e3a\u82e5\u5e72\u4e2a\u66f4\u5c0f\u7684\u3001\u4e0d\u8fd0\u884c\u5728\u540c\\n\u4e00\u4e2a\u8fdb\u7a0b\u7684\u72ec\u7acb\u670d\u52a1\uff0c\u8fd9\u4e9b\u670d\u52a1\u62c6\u5206\u65b9\u6cd5\u540e\u6765\u5bfc\u81f4\u4e86\u9762\u5411\u670d\u52a1\u67b6\u6784\uff08Service-Oriented Architecture\uff09\u7684\u4e00\u6bb5\u5174\u76db\u671f\uff0c\u6211\u4eec\u79f0\u5176\u4e3a\u201cSOA \u65f6\u4ee3\u201d\u3002\\n\\n## \u9762\u5411\u670d\u52a1\u67b6\u6784(SOA)\\n:::tip \u9762\u5411\u670d\u52a1\u67b6\u6784(Service-Oriented Architecture)\\n\u9762\u5411\u670d\u52a1\u7684\u4f53\u7cfb\u7ed3\u6784\uff08\u82f1\u8bed\uff1aservice-oriented architecture\uff09\u5e76\u4e0d\u7279\u6307\u4e00\u79cd\u6280\u672f\uff0c\u800c\u662f\u4e00\u79cd\u5206\u5e03\u5f0f\u8fd0\u7b97\u7684\u8f6f\u4ef6\u8bbe\u8ba1\u65b9\u6cd5\u3002\\nSOA\u4e2d\u7684\u4e00\u9879\u670d\u52a1\u5e94\u6709\u4ee5\u4e0b\u56db\u4e2a\u7279\u6027\uff1a\\n\\n- \u9488\u5bf9\u67d0\u7279\u5b9a\u8981\u6c42\u7684\u8f93\u51fa\uff0c\u8be5\u670d\u52a1\u5c31\u662f\u8fd0\u4f5c\u4e00\u9879\u5546\u4e1a\u903b\u8f91\\n- \u5177\u6709\u5b8c\u5907\u7684\u7279\u6027\uff08self-contained\uff09\\n- \u6d88\u8d39\u8005\u5e76\u4e0d\u9700\u8981\u4e86\u89e3\u6b64\u670d\u52a1\u7684\u8fd0\u4f5c\u8fc7\u7a0b\\n- \u53ef\u80fd\u7531\u5e95\u5c42\u5176\u4ed6\u670d\u52a1\u7ec4\u6210\\n\\n\u2014\u2014 \u5f15\u81ea\u300a[\u7ef4\u57fa\u767e\u79d1](https://zh.wikipedia.org/zh-cn/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84)\u300b\\n:::\\n\\n### [\u4fe1\u606f\u70df\u56f1\u5f0f\u67b6\u6784](https://en.wikipedia.org/wiki/Information_silo)\\n\u6307\u7684\u662f\u4e00\u79cd\u4e0d\u80fd\u4e0e\u5176\u4ed6\u76f8\u5173\u4fe1\u606f\u7cfb\u7edf\u4e4b\u95f4\u8fdb\u884c\u4e92\u64cd\u4f5c\u6216\u8005\u8bf4\u534f\u8c03\u5de5\u4f5c\u7684\u4fe1\u606f\u7cfb\u7edf\u3002\\n\\n![\u4fe1\u606f\u70df\u56f1\u5f0f\u67b6\u6784](../resource/202205/information_silo.png)\\n<center>\u4fe1\u606f\u70df\u56f1\u5f0f\u67b6\u6784</center>\\n<center>\u56fe\u7247\u6765\u81ea <a href=\\"https://en.wikipedia.org/wiki/Information_silo\\">\u7ef4\u57fa\u767e\u79d1</a></center>\\n\\n### [\u5fae\u5185\u6838\u67b6\u6784](https://en.wikipedia.org/wiki/Microkernel)\\n\u5fae\u5185\u6838\u67b6\u6784\u4e5f\u88ab\u79f0\u4e3a\u63d2\u4ef6\u5f0f\u67b6\u6784\uff08Plug-in Architecture\uff09\u3002\\n\\n\u5404\u5b50\u7cfb\u7edf\u4f7f\u7528\u5230\u7684\u516c\u5171\u670d\u52a1\u3001\u6570\u636e\u3001\u8d44\u6e90\u96c6\u4e2d\u5230\u4e00\u5757\uff0c\u6210\u4e3a\u4e00\u4e2a\u88ab\u6240\u6709\u4e1a\u52a1\u7cfb\u7edf\u5171\u540c\u4f9d\u8d56\u7684\u6838\u5fc3\uff08Kernel\uff0c\u4e5f\u79f0\u4e3a Core System\uff09\uff0c\u5177\u4f53\u7684\u4e1a\u52a1\u7cfb\u7edf\u4ee5\\n\u63d2\u4ef6\u6a21\u5757\uff08Plug-in Modules\uff09\u7684\u5f62\u5f0f\u5b58\u5728\uff0c\u8fd9\u6837\u4e5f\u53ef\u63d0\u4f9b\u53ef\u6269\u5c55\u7684\u3001\u7075\u6d3b\u7684\u3001\u5929\u7136\u9694\u79bb\u7684\u529f\u80fd\u7279\u6027\uff0c\u5373\u5fae\u5185\u6838\u67b6\u6784\uff0c\u5982\u56fe\u6240\u793a\u3002\\n\\n![\u5fae\u5185\u6838\u67b6\u6784\u793a\u610f](../resource/202205/coresystem.png)\\n<center>\u5fae\u5185\u6838\u67b6\u6784\u793a\u610f</center>\\n<center>\u56fe\u7247\u5f15\u81eaO\'Reilly \u7684\u5f00\u653e\u6587\u6863\u300a <a href=\\"https://www.oreilly.com/content/software-architecture-patterns/\\">\\nSoftware Architecture Patterns</a>\u300b</center>\\n\\n### [\u4e8b\u4ef6\u9a71\u52a8\u67b6\u6784](https://en.wikipedia.org/wiki/Event-driven_architecture)\\n\u4e3a\u4e86\u80fd\u8ba9\u5b50\u7cfb\u7edf\u4e92\u76f8\u901a\u4fe1\uff0c\u4e00\u79cd\u53ef\u884c\u7684\u65b9\u6848\u662f\u5728\u5b50\u7cfb\u7edf\u4e4b\u95f4\u5efa\u7acb\u4e00\u5957\u4e8b\u4ef6\u961f\u5217\u7ba1\u9053\uff08Event Queues\uff09\uff0c\u6765\u81ea\u7cfb\u7edf\u5916\u90e8\u7684\u6d88\u606f\u5c06\u4ee5\u4e8b\u4ef6\u7684\u5f62\u5f0f\u53d1\u9001\u81f3\u7ba1\u9053\u4e2d\uff0c\u5404\u4e2a\\n\u5b50\u7cfb\u7edf\u4ece\u7ba1\u9053\u91cc\u83b7\u53d6\u81ea\u5df1\u611f\u5174\u8da3\u3001\u80fd\u591f\u5904\u7406\u7684\u4e8b\u4ef6\u6d88\u606f\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u4e8b\u4ef6\u65b0\u589e\u6216\u8005\u4fee\u6539\u5176\u4e2d\u7684\u9644\u52a0\u4fe1\u606f\uff0c\u751a\u81f3\u53ef\u4ee5\u81ea\u5df1\u53d1\u5e03\u4e00\u4e9b\u65b0\u7684\u4e8b\u4ef6\u5230\u7ba1\u9053\u961f\u5217\u4e2d\u53bb\uff0c\u5982\u6b64\uff0c\u6bcf\\n\u4e00\u4e2a\u6d88\u606f\u7684\u5904\u7406\u8005\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u9ad8\u5ea6\u89e3\u8026\u7684\uff0c\u4f46\u53c8\u80fd\u4e0e\u5176\u4ed6\u5904\u7406\u8005\uff08\u5982\u679c\u5b58\u5728\u8be5\u6d88\u606f\u5904\u7406\u8005\u7684\u8bdd\uff09\u901a\u8fc7\u4e8b\u4ef6\u7ba1\u9053\u8fdb\u884c\u4e92\u52a8\uff0c\u5982\u56fe\u6240\u793a:\\n\\n![\u4e8b\u4ef6\u9a71\u52a8\u67b6\u6784\u793a\u610f](../resource/202205/eventbus.png)\\n<center>\u4e8b\u4ef6\u9a71\u52a8\u67b6\u6784\u793a\u610f</center>\\n<center>\u56fe\u7247\u5f15\u81eaO\'Reilly \u7684\u5f00\u653e\u6587\u6863\u300a <a href=\\"https://www.oreilly.com/content/software-architecture-patterns/\\">\\nSoftware Architecture Patterns</a>\u300b</center>\\n\\n## \u5fae\u670d\u52a1\u65f6\u4ee3(Microservices)\\n\\n:::tip \u5fae\u670d\u52a1\\n\u5fae\u670d\u52a1\u662f\u4e00\u79cd\u901a\u8fc7\u591a\u4e2a\u5c0f\u578b\u670d\u52a1\u7ec4\u5408\u6765\u6784\u5efa\u5355\u4e2a\u5e94\u7528\u7684\u67b6\u6784\u98ce\u683c\uff0c\u8fd9\u4e9b\u670d\u52a1\u56f4\u7ed5\u4e1a\u52a1\u80fd\u529b\u800c\u975e\u7279\u5b9a\u7684\u6280\u672f\u6807\u51c6\u6765\u6784\u5efa\u3002\u5404\u4e2a\u670d\u52a1\u53ef\u4ee5\u91c7\u7528\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e0d\u540c\u7684\\n\u6570\u636e\u5b58\u50a8\u6280\u672f\uff0c\u8fd0\u884c\u5728\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e4b\u4e2d\u3002\u670d\u52a1\u91c7\u53d6\u8f7b\u91cf\u7ea7\u7684\u901a\u4fe1\u673a\u5236\u548c\u81ea\u52a8\u5316\u7684\u90e8\u7f72\u673a\u5236\u5b9e\u73b0\u901a\u4fe1\u4e0e\u8fd0\u7ef4\u3002\\n:::\\n\\n### \u7279\u70b9\\n- \u5404\u81ea\u90fd\u5728\u8f83\u5927\u7684\u57df\u4e0a\u4e0b\u6587\u4e2d\u5b9e\u73b0\u7279\u5b9a\u4e1a\u52a1\u529f\u80fd\\n- \u5404\u81ea\u90fd\u81ea\u4e3b\u5f00\u53d1\uff0c\u53ef\u4ee5\u72ec\u7acb\u90e8\u7f72\\n- \u5404\u81ea\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u5c01\u88c5\u5176\u81ea\u5df1\u7684\u6570\u636e\u5b58\u50a8\u6280\u672f\u3001\u4f9d\u8d56\u9879\u548c\u7f16\u7a0b\u5e73\u53f0\\n- \u5404\u81ea\u90fd\u5728\u81ea\u5df1\u7684\u8fdb\u7a0b\u4e2d\u8fd0\u884c\uff0c\u5e76\u4f7f\u7528 HTTP/HTTPS\u3001gRPC\u3001WebSocket \u6216 AMQP \u7b49\u6807\u51c6\u901a\u4fe1\u534f\u8bae\u4e0e\u5176\u4ed6\u5fae\u670d\u52a1\u8fdb\u884c\u901a\u4fe1\\n- \u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\u5f62\u6210\u5e94\u7528\u7a0b\u5e8f\\n\\n### \u4f18\u52bf\\n- \u6bcf\u4e2a\u5fae\u670d\u52a1\u90fd\u6709\u81ea\u6cbb\u751f\u547d\u5468\u671f\uff0c\u53ef\u4ee5\u72ec\u7acb\u53d1\u5c55\u5e76\u9891\u7e41\u90e8\u7f72\u3002 \u4e0d\u5fc5\u7b49\u5f85\u6bcf\u5b63\u5ea6\u53d1\u5e03\u4e00\u6b21\u624d\u80fd\u90e8\u7f72\u65b0\u529f\u80fd\u6216\u66f4\u65b0\u3002 \u53ef\u4ee5\u66f4\u65b0\u5b9e\u65f6\u5e94\u7528\u7a0b\u5e8f\u7684\u5c0f\u533a\u57df\uff0c\u964d\u4f4e\u4e2d\u65ad\u6574\\n\u4e2a\u7cfb\u7edf\u7684\u98ce\u9669\u3002 \u65e0\u9700\u5b8c\u5168\u91cd\u65b0\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u5373\u53ef\u8fdb\u884c\u66f4\u65b0\\n- \u6bcf\u4e2a\u5fae\u670d\u52a1\u90fd\u53ef\u4ee5\u72ec\u7acb\u7f29\u653e\u3002 \u4f60\u53ef\u4ee5\u4ec5\u6a2a\u5411\u6269\u5c55\u9700\u8981\u66f4\u591a\u5904\u7406\u80fd\u529b\u624d\u80fd\u6ee1\u8db3\u6240\u9700\u6027\u80fd\u7ea7\u522b\u548c\u670d\u52a1\u7ea7\u522b\u534f\u8bae\u7684\u670d\u52a1\uff0c\u800c\u4e0d\u662f\u5c06\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f5c\u4e3a\u5355\u4e2a\u5355\u5143\u8fdb\u884c\u7f29\\n- \u653e\u3002 \u7cbe\u7ec6\u7f29\u653e\u53ef\u4f7f\u4f60\u66f4\u597d\u5730\u63a7\u5236\u7cfb\u7edf\uff0c\u5e76\u4e14\u6709\u52a9\u4e8e\u964d\u4f4e\u603b\u4f53\u6210\u672c\uff0c\u56e0\u4e3a\u662f\u7f29\u653e\u90e8\u5206\u7cfb\u7edf\uff08\u800c\u4e0d\u662f\u6240\u6709\u5185\u5bb9\uff09\\n\\n### \u6311\u6218\\n#### 1. \u901a\u4fe1\\n\u524d\u7aef\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u4e0e\u540e\u7aef\u6838\u5fc3\u5fae\u670d\u52a1\u901a\u4fe1\uff1f \u662f\u5426\u5141\u8bb8\u76f4\u63a5\u901a\u4fe1\uff1f \u6216\u8005\uff0c\u662f\u5426\u53ef\u4ee5\u4f7f\u7528\u63d0\u4f9b\u7075\u6d3b\u6027\u3001\u63a7\u5236\u548c\u5b89\u5168\u6027\u7684\u7f51\u5173\u5916\u89c2\u6765\u62bd\u8c61\u540e\u7aef\u5fae\u670d\u52a1\uff1f\\n\\n\u540e\u7aef\u6838\u5fc3\u5fae\u670d\u52a1\u5982\u4f55\u5f7c\u6b64\u901a\u4fe1\uff1f \u662f\u5426\u5141\u8bb8\u8fdb\u884c\u53ef\u4ee5\u63d0\u9ad8\u8026\u5408\u5e76\u5f71\u54cd\u6027\u80fd\u548c\u654f\u6377\u6027\u7684\u76f4\u63a5 HTTP \u8c03\u7528\uff1f \u6216\u8005\u662f\u5426\u53ef\u4ee5\u8003\u8651\u5c06\u6d88\u606f\u4e0e\u961f\u5217\u548c\u4e3b\u9898\u6280\u672f\u5206\u79bb\uff1f\\n\\n#### 2. \u6545\u969c\u4fee\u590d\\n\u5fae\u670d\u52a1\u4f53\u7cfb\u7ed3\u6784\u5c06\u7cfb\u7edf\u4ece\u8fdb\u7a0b\u5185\u8fc1\u79fb\u5230\u8fdb\u7a0b\u5916\u7f51\u7edc\u901a\u4fe1\u3002 \u5728\u5206\u5e03\u5f0f\u4f53\u7cfb\u7ed3\u6784\u4e2d\uff0c\u5f53\u670d\u52a1 B \u672a\u54cd\u5e94\u6765\u81ea\u670d\u52a1 A \u7684\u7f51\u7edc\u8c03\u7528\u65f6\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\uff1f \u6216\u8005\uff0c\u5f53\u670d\u52a1\\nC \u6682\u65f6\u4e0d\u53ef\u7528\uff0c\u800c\u8c03\u7528\u5b83\u7684\u5176\u4ed6\u670d\u52a1\u88ab\u963b\u6b62\u65f6\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\uff1f\\n\\n#### 3. \u5206\u5e03\u5f0f\u6570\u636e\\n\u6309\u7167\u8bbe\u8ba1\uff0c\u6bcf\u4e2a\u5fae\u670d\u52a1\u90fd\u5c01\u88c5\u81ea\u5df1\u7684\u6570\u636e\uff0c\u901a\u8fc7\u5176\u516c\u5171\u63a5\u53e3\u516c\u5f00\u64cd\u4f5c\u3002 \u5982\u679c\u662f\u8fd9\u6837\uff0c\u5982\u4f55\u8de8\u591a\u4e2a\u670d\u52a1\u67e5\u8be2\u6570\u636e\u6216\u5b9e\u73b0\u4e8b\u52a1\uff1f\\n\\n#### 4. \u6570\u636e\u5b89\u5168\\n\u5fae\u670d\u52a1\u5982\u4f55\u5b89\u5168\u5730\u5b58\u50a8\u5e76\u7ba1\u7406\u673a\u5bc6\u548c\u654f\u611f\u914d\u7f6e\u6570\u636e\uff1f\\n\\n### \u7ec4\u4ef6\u4e0e\u670d\u52a1\\n:::tip \u7ec4\u4ef6\\nA component is a unit of software that is independently replaceable and upgradeable\\n\\n\u7ec4\u4ef6\u662f\u53ef\u72ec\u7acb\u66f4\u6362\u548c\u5347\u7ea7\u7684\u8f6f\u4ef6\u5355\u5143\u3002\\n\\n-- \u5f15\u81ea \u300a<a href=\\"https://martinfowler.com/articles/microservices.html\\">\\nMicroservices: a definition of this new architectural term</a>\u300b\\n:::\\n\\n:::tip \u670d\u52a1\\n\u670d\u52a1\u662f\u53ef\u72ec\u7acb\u90e8\u7f72\u7684\u7ec4\u4ef6\\n:::\\n\\n\u670d\u52a1\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u7ec4\u4ef6\uff0c\u53ef\u4ee5\u72ec\u7acb\u90e8\u7f72\u3002\\n\\n## \u5355\u4f53\u670d\u52a1\u548c\u5fae\u670d\u52a1\u5bf9\u6bd4\\n\u5355\u4f53\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u53d6\u5f97\u6210\u529f\uff0c\u4f46\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u5bf9\u5b83\u4eec\u611f\u5230\u6cae\u4e27\u2014\u2014\u5c24\u5176\u662f\u968f\u7740\u8d8a\u6765\u8d8a\u591a\u7684\u5e94\u7528\u7a0b\u5e8f\u88ab\u90e8\u7f72\u5230\u4e91\u4e2d\u3002\u66f4\u6539\u5468\u671f\u662f\u7d27\u5bc6\u76f8\u8fde\u7684\u2014\u2014\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u5c0f\u90e8\u5206\\n\u8fdb\u884c\u66f4\u6539\uff0c\u9700\u8981\u91cd\u65b0\u6784\u5efa\u548c\u90e8\u7f72\u6574\u4e2a\u5355\u4f53\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u901a\u5e38\u5f88\u96be\u4fdd\u6301\u826f\u597d\u7684\u6a21\u5757\u5316\u7ed3\u6784\uff0c\u8fd9\u4f7f\u5f97\u4fdd\u6301\u5e94\u8be5\u53ea\u5f71\u54cd\u8be5\u6a21\u5757\u4e2d\u7684\u4e00\u4e2a\u6a21\u5757\u7684\u66f4\u6539\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\\n\u6269\u5c55\u9700\u8981\u6269\u5c55\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u9700\u8981\u66f4\u591a\u8d44\u6e90\u7684\u90e8\u5206\u3002\\n\\n![\u5355\u4f53\u548c\u5fae\u670d\u52a1](../resource/202205/sketch.png)\\n<center>\u5355\u4f53\u548c\u5fae\u670d\u52a1</center>\\n<center>\u56fe\u7247\u5f15\u81ea\u300a <a href=\\"https://martinfowler.com/articles/microservices.html\\">\\nMicroservices: a definition of this new architectural term</a>\u300b</center>\\n<p></p>\\n\\n\u5355\u4f53\u5e94\u7528\u7a0b\u5e8f\u66f4\u559c\u6b22\u4f7f\u7528\u5355\u4e2a\u903b\u8f91\u6570\u636e\u5e93\u6765\u5b58\u50a8\u6301\u4e45\u6570\u636e\uff0c\u5fae\u670d\u52a1\u66f4\u559c\u6b22\u8ba9\u6bcf\u4e2a\u670d\u52a1\u7ba1\u7406\u81ea\u5df1\u7684\u6570\u636e\u5e93\uff0c\u53ef\u4ee5\u662f\u76f8\u540c\u6570\u636e\u5e93\u6280\u672f\u7684\u4e0d\u540c\u5b9e\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u662f\u5b8c\u5168\u4e0d\u540c\u7684\\n\u6570\u636e\u5e93\u7cfb\u7edf\u2014\u2014\u8fd9\u79cd\u65b9\u6cd5\u79f0\u4e3a Polyglot Persistence\u3002\\n\\n![\u5355\u4f53\u548c\u5fae\u670d\u52a1](../resource/202205/decentralised-data.png)\\n<center>\u5355\u4f53\u548c\u5fae\u670d\u52a1</center>\\n<center>\u56fe\u7247\u5f15\u81ea\u300a <a href=\\"https://martinfowler.com/articles/microservices.html\\">\\nMicroservices: a definition of this new architectural term</a>\u300b</center>\\n\\n## \u4e91\u539f\u751f\u65f6\u4ee3(Cloud Native)\\n:::tip \u4e91\u539f\u751f\\n\u4e91\u539f\u751f\u6280\u672f\u4f7f\u7ec4\u7ec7\u80fd\u591f\u5728\u65b0\u5f0f\u52a8\u6001\u73af\u5883\uff08\u5982\u516c\u6709\u4e91\u3001\u79c1\u6709\u4e91\u548c\u6df7\u5408\u4e91\uff09\u4e2d\u6784\u5efa\u548c\u8fd0\u884c\u53ef\u7f29\u653e\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u5bb9\u5668\u3001\u670d\u52a1\u7f51\u683c\u3001\u5fae\u670d\u52a1\u3001\u4e0d\u53ef\u53d8\u57fa\u7840\u7ed3\u6784\u548c\u58f0\u660e\u6027 \\nAPI \u4fbf\u662f\u6b64\u65b9\u6cd5\u7684\u8303\u4f8b\u3002\\n:::\\n\\n![\u4e91\u539f\u751f\u57fa\u7840\u67b6\u6784](../resource/202205/cloud-native-foundational-pillars.png)\\n<center>\u4e91\u539f\u751f\u57fa\u7840\u67b6\u6784</center>\\n<center>\u56fe\u7247\u5f15\u81ea\u300a <a href=\\"https://docs.microsoft.com/zh-cn/dotnet/architecture/cloud-native/definition\\">\\nMicrosoft Build: \u4ec0\u4e48\u662f\u4e91\u539f\u751f\uff1f\u300b</a></center>\\n\\n### \u8bbe\u8ba1\u8981\u7d20\\n|\u56e0\u7d20 |\\t\u8bf4\u660e|\\n|---|---|\\n1 | \u57fa\u672c\u4ee3\u7801\\t\u6bcf\u4e2a\u5fae\u670d\u52a1\u90fd\u6709\u5355\u4e2a\u57fa\u672c\u4ee3\u7801\uff0c\u5b58\u50a8\u5728\u5176\u81ea\u5df1\u7684\u5b58\u50a8\u5e93\u4e2d\u3002 \u5b83\u901a\u8fc7\u7248\u672c\u63a7\u5236\u8fdb\u884c\u8ddf\u8e2a\uff0c\u53ef\u4ee5\u90e8\u7f72\u5230\u591a\u4e2a\u73af\u5883\uff08QA\u3001\u6682\u5b58\u3001\u751f\u4ea7\uff09\u3002|\\n2 | \u4f9d\u8d56\u9879\\t\u6bcf\u4e2a\u5fae\u670d\u52a1\u90fd\u9694\u79bb\u5e76\u6253\u5305\u5176\u81ea\u5df1\u7684\u4f9d\u8d56\u9879\uff0c\u4ee5\u5728\u4e0d\u5f71\u54cd\u6574\u4e2a\u7cfb\u7edf\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u66f4\u6539\u3002|\\n3 | \u914d\u7f6e\\t\u914d\u7f6e\u4fe1\u606f\u901a\u8fc7\u4ee3\u7801\u4e4b\u5916\u7684\u914d\u7f6e\u7ba1\u7406\u5de5\u5177\u79fb\u51fa\u5fae\u670d\u52a1\u548c\u5b9e\u73b0\u5916\u90e8\u5316\u3002 \u5728\u5e94\u7528\u4e86\u6b63\u786e\u914d\u7f6e\u7684\u60c5\u51b5\u4e0b\uff0c\u76f8\u540c\u90e8\u7f72\u53ef\u4ee5\u5728\u73af\u5883\u95f4\u4f20\u64ad\u3002|\\n4 | \u652f\u6301\u670d\u52a1\\t\u8f85\u52a9\u8d44\u6e90\uff08\u6570\u636e\u5b58\u50a8\u3001\u7f13\u5b58\u3001\u6d88\u606f\u4e2d\u8f6c\u7ad9\uff09\u5e94\u901a\u8fc7\u53ef\u5bfb\u5740 URL \u8fdb\u884c\u516c\u5f00\u3002 \u8fd9\u6837\u505a\u53ef\u4f7f\u8d44\u6e90\u4e0e\u5e94\u7528\u7a0b\u5e8f\u5206\u79bb\uff0c\u4f7f\u5176\u53ef\u4ee5\u4e92\u6362\u3002|\\n5 | \u751f\u6210\u3001\u53d1\u5e03\u3001\u8fd0\u884c\\t\u6bcf\u4e2a\u7248\u672c\u90fd\u5fc5\u987b\u5728\u751f\u6210\u3001\u53d1\u5e03\u548c\u8fd0\u884c\u9636\u6bb5\u6267\u884c\u4e25\u683c\u7684\u5206\u79bb\u3002 \u5404\u81ea\u90fd\u5e94\u4f7f\u7528\u552f\u4e00 ID \u8fdb\u884c\u6807\u8bb0\uff0c\u5e76\u652f\u6301\u56de\u6eda\u529f\u80fd\u3002 \u65b0\u5f0f CI/CD \u7cfb\u7edf\u6709\u52a9\u4e8e\u5b9e\u73b0\u6b64\u539f\u5219\u3002|\\n6 | \u8fdb\u7a0b\\t\u6bcf\u4e2a\u5fae\u670d\u52a1\u5e94\u5728\u5176\u81ea\u5df1\u7684\u8fdb\u7a0b\u4e2d\u6267\u884c\uff0c\u4e0e\u5176\u4ed6\u6b63\u5728\u8fd0\u884c\u7684\u670d\u52a1\u9694\u79bb\u3002 \u5c06\u6240\u9700\u72b6\u6001\u5916\u90e8\u5316\u5230\u652f\u6301\u670d\u52a1\uff0c\u5982\u5206\u5e03\u5f0f\u7f13\u5b58\u6216\u6570\u636e\u5b58\u50a8\u3002|\\n7 | \u7aef\u53e3\u7ed1\u5b9a\\t\u6bcf\u4e2a\u5fae\u670d\u52a1\u90fd\u5e94\u662f\u72ec\u7acb\u7684\uff0c\u5176\u63a5\u53e3\u548c\u529f\u80fd\u5728\u81ea\u5df1\u7684\u7aef\u53e3\u4e0a\u516c\u5f00\u3002 \u8fd9\u6837\u505a\u53ef\u4e0e\u5176\u4ed6\u5fae\u670d\u52a1\u9694\u79bb\u3002|\\n8 | \u5e76\u53d1\\t\u5f53\u5bb9\u91cf\u9700\u8981\u589e\u52a0\u65f6\uff0c\u8de8\u591a\u4e2a\u76f8\u540c\u8fdb\u7a0b\uff08\u526f\u672c\uff09\u6a2a\u5411\u6269\u5c55\u670d\u52a1\uff0c\u800c\u4e0d\u662f\u5728\u529f\u80fd\u6700\u5f3a\u5927\u7684\u53ef\u7528\u8ba1\u7b97\u673a\u4e0a\u7eb5\u5411\u6269\u5c55\u5355\u4e2a\u5927\u578b\u5b9e\u4f8b\u3002 \u5c06\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4e3a\u5e76\u53d1\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ece\u800c\u65e0\u7f1d\u5730\u5728\u4e91\u73af\u5883\u4e2d\u6a2a\u5411\u6269\u5c55\u3002|\\n9 | \u53ef\u5904\u7f6e\u6027\\t\u670d\u52a1\u5b9e\u4f8b\u5e94\u662f\u53ef\u5904\u7f6e\u7684\u3002 \u652f\u6301\u5feb\u901f\u542f\u52a8\u4ee5\u589e\u52a0\u53ef\u4f38\u7f29\u6027\u673a\u4f1a\uff0c\u4ee5\u53ca\u652f\u6301\u6b63\u5e38\u5173\u95ed\u4ee5\u4f7f\u7cfb\u7edf\u4fdd\u6301\u6b63\u786e\u72b6\u6001\u3002 Docker \u5bb9\u5668\u4ee5\u53ca\u4e1a\u52a1\u6d41\u7a0b\u534f\u8c03\u7a0b\u5e8f\u672c\u8d28\u4e0a\u6ee1\u8db3\u6b64\u8981\u6c42\u3002|\\n10|  \u5f00\u53d1/\u751f\u4ea7\u7b49\u540c\\t\u4f7f\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u751f\u547d\u5468\u671f\u4e2d\u7684\u5404\u4e2a\u73af\u5883\u5c3d\u53ef\u80fd\u76f8\u4f3c\uff0c\u907f\u514d\u4f7f\u7528\u6210\u672c\u9ad8\u6602\u7684\u5feb\u6377\u65b9\u5f0f\u3002 \u5728\u8fd9\u91cc\uff0c\u901a\u8fc7\u4fc3\u8fdb\u76f8\u540c\u7684\u6267\u884c\u73af\u5883\uff0c\u5bb9\u5668\u7684\u91c7\u7528\u53ef\u4ee5\u505a\u51fa\u5f88\u5927\u8d21\u732e\u3002|\\n11|  \u65e5\u5fd7\u8bb0\u5f55\\t\u5c06\u5fae\u670d\u52a1\u751f\u6210\u7684\u65e5\u5fd7\u89c6\u4e3a\u4e8b\u4ef6\u6d41\u3002 \u4f7f\u7528\u4e8b\u4ef6\u805a\u5408\u5668\u5904\u7406\u5b83\u4eec\u3002 \u5c06\u65e5\u5fd7\u6570\u636e\u4f20\u64ad\u5230\u6570\u636e\u6316\u6398/\u65e5\u5fd7\u7ba1\u7406\u5de5\u5177\uff08\u5982 Azure Monitor \u6216 Splunk\uff09\u5e76\u6700\u7ec8\u4f20\u64ad\u5230\u957f\u671f\u5b58\u6863\u3002|\\n12 | \u7ba1\u7406\u5458\u8fdb\u7a0b\\t\u4ee5\u4e00\u6b21\u6027\u8fdb\u7a0b\u5f62\u5f0f\u8fd0\u884c\u7ba1\u7406\u6027/\u7ba1\u7406\u4efb\u52a1\uff0c\u4f8b\u5982\u6570\u636e\u6e05\u7406\u6216\u8ba1\u7b97\u5206\u6790\u3002 \u4f7f\u7528\u72ec\u7acb\u5de5\u5177\u4ece\u751f\u4ea7\u73af\u5883\u8c03\u7528\u8fd9\u4e9b\u4efb\u52a1\uff0c\u4f46\u72ec\u7acb\u4e8e\u5e94\u7528\u7a0b\u5e8f\u3002|\\n13 | API \u4f18\u5148\\t\u4f7f\u4e00\u5207\u6210\u4e3a\u670d\u52a1\u3002 \u5047\u8bbe\u524d\u7aef\u5ba2\u6237\u7aef\u3001\u7f51\u5173\u6216\u5176\u4ed6\u670d\u52a1\u4f1a\u4f7f\u7528\u4f60\u7684\u4ee3\u7801\u3002|\\n14 | \u9065\u6d4b\\t\u5728\u5de5\u4f5c\u7ad9\u4e0a\uff0c\u4f60\u53ef\u6df1\u5165\u4e86\u89e3\u5e94\u7528\u7a0b\u5e8f\u53ca\u5176\u884c\u4e3a\u3002 \u5728\u4e91\u4e2d\uff0c\u4f60\u65e0\u6cd5\u8fd9\u6837\u3002 \u786e\u4fdd\u8bbe\u8ba1\u5305\u62ec\u76d1\u89c6\u3001\u7279\u5b9a\u4e8e\u57df\u548c\u8fd0\u884c\u72b6\u51b5/\u7cfb\u7edf\u6570\u636e\u7684\u96c6\u5408\u3002|\\n15 | \u8eab\u4efd\u9a8c\u8bc1/\u6388\u6743\\t\u4ece\u5f00\u59cb\u4fbf\u5b9e\u73b0\u6807\u8bc6\u3002 \u8bf7\u8003\u8651\u516c\u6709\u4e91\u4e2d\u63d0\u4f9b\u7684 [RBAC\uff08\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236\uff09](https://docs.microsoft.com/zh-CN/azure/role-based-access-control/overview) \u529f\u80fd\u3002|\\n\\n## Serverless\\n\\n\u65e0\u670d\u52a1\u73b0\u5728\u8fd8\u6ca1\u6709\u4e00\u4e2a\u7279\u522b\u6743\u5a01\u7684\u201c\u5b98\u65b9\u201d\u5b9a\u4e49\uff0c\u4f46\u5b83\u7684\u6982\u5ff5\u5e76\u6ca1\u6709\u524d\u9762\u5404\u79cd\u67b6\u6784\u90a3\u4e48\u590d\u6742\uff0c\u672c\u6765\u65e0\u670d\u52a1\u4e5f\u662f\u4ee5\u201c\u7b80\u5355\u201d\u4e3a\u4e3b\u8981\u5356\u70b9\u7684\uff0c\u5b83\u53ea\u6d89\u53ca\u4e24\u5757\u5185\u5bb9\uff1a\\n\u540e\u7aef\u8bbe\u65bd\uff08Backend\uff09\u548c\u51fd\u6570\uff08Function\uff09\u3002\\n\\n**\u540e\u7aef\u8bbe\u65bd** \u662f\u6307\u6570\u636e\u5e93\u3001\u6d88\u606f\u961f\u5217\u3001\u65e5\u5fd7\u3001\u5b58\u50a8\uff0c\u7b49\u7b49\u8fd9\u4e00\u7c7b\u7528\u4e8e\u652f\u6491\u4e1a\u52a1\u903b\u8f91\u8fd0\u884c\uff0c\u4f46\u672c\u8eab\u65e0\u4e1a\u52a1\u542b\u4e49\u7684\u6280\u672f\u7ec4\u4ef6\uff0c\u8fd9\u4e9b\u540e\u7aef\u8bbe\u65bd\u90fd\u8fd0\u884c\u5728\u4e91\u4e2d\uff0c\u65e0\u670d\u52a1\u4e2d\u79f0\u5176\\n\u4e3a\u201c\u540e\u7aef\u5373\u670d\u52a1\u201d\uff08Backend as a Service\uff0cBaaS\uff09\u3002\\n**\u51fd\u6570** \u662f\u6307\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\uff0c\u8fd9\u91cc\u51fd\u6570\u7684\u6982\u5ff5\u4e0e\u7c92\u5ea6\uff0c\u90fd\u5df2\u7ecf\u5f88\u63a5\u8fd1\u4e8e\u7a0b\u5e8f\u7f16\u7801\u89d2\u5ea6\u7684\u51fd\u6570\u4e86\uff0c\u5176\u533a\u522b\u662f\u65e0\u670d\u52a1\u4e2d\u7684\u51fd\u6570\u8fd0\u884c\u5728\u4e91\u7aef\uff0c\u4e0d\u5fc5\u8003\u8651\u7b97\u529b\u95ee\u9898\uff0c\u4e0d\u5fc5\u8003\u8651\\n\u5bb9\u91cf\u89c4\u5212\uff08\u4ece\u6280\u672f\u89d2\u5ea6\u53ef\u4ee5\u4e0d\u8003\u8651\uff0c\u4ece\u8ba1\u8d39\u7684\u89d2\u5ea6\u4f60\u7684\u94b1\u5305\u591f\u4e0d\u591f\u7528\u8fd8\u662f\u8981\u6382\u91cf\u4e00\u4e0b\u7684\uff09\uff0c\u65e0\u670d\u52a1\u4e2d\u79f0\u5176\u4e3a\u201c\u51fd\u6570\u5373\u670d\u52a1\u201d\uff08Function as a Service\uff0cFaaS\uff09\u3002\\n\\n\\n## \u6269\u5c55\u9605\u8bfb\\n1. [\u300aMicroservices: a definition of this new architectural term\u300b](https://martinfowler.com/articles/microservices.html)\\n2. [\u300aMicrosoft Build: \u4ec0\u4e48\u662f\u4e91\u539f\u751f\uff1f\u300b](https://docs.microsoft.com/zh-cn/dotnet/architecture/cloud-native/definition)"},{"id":"/go/grpc-balaner","metadata":{"permalink":"/go/grpc-balaner","source":"@site/blog/go/grpc-balaner.md","title":"grpc \u6e90\u7801\u9605\u8bfb\u4e4b balancer","description":"cover","date":"2022-01-17T00:00:00.000Z","formattedDate":"2022\u5e741\u670817\u65e5","tags":[{"label":"gprc","permalink":"/tags/gprc"},{"label":"\u6e90\u7801\u5206\u6790","permalink":"/tags/\u6e90\u7801\u5206\u6790"}],"readingTime":9.72,"truncated":true,"authors":[{"name":"Keson","title":"\u5b57\u8282\u8df3\u52a8\u5f00\u53d1\u5de5\u7a0b\u5e08 /  goctl \u7ef4\u62a4\u4eba","url":"https://github.com/anqiansong","imageURL":"/img/logo.webp","key":"keson"}],"frontMatter":{"title":"grpc \u6e90\u7801\u9605\u8bfb\u4e4b balancer","date":"2022-01-17T00:00:00.000Z","authors":"keson","tags":["gprc","\u6e90\u7801\u5206\u6790"]},"prevItem":{"title":"\u51e4\u51f0\u67b6\u6784\u5b66\u4e60\u7b14\u8bb0\u2014\u2014\u6f14\u8fdb\u4e2d\u7684\u67b6\u6784","permalink":"/arch/icyfenix-one"},"nextItem":{"title":"gRPC \u6e90\u7801\u9605\u8bfb\u53ca\u5b9e\u8df5\u4e4b resolver","permalink":"/go/grpc-resolver"}},"content":"![cover](../resource/202201/grpc-balance.png)\\n\\n\u63a5\u7740\u4e0a\u7bc7\u300agRPC \u63d2\u4ef6\u5f0f\u7f16\u7a0b\u4e4bResolver\u300b\uff0cgRPC \u5c06 `target` \u89e3\u6790\u4e3a `resolver.Target` \u540e\uff0c\u901a\u8fc7 `resolver.Builder.Build` \u65b9\u6cd5\u8c03\u7528\\n`resolver.ClientConn.UpdateState(State) error` \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5\u5462\uff0c\u6211\u4eec\u672c\u7bc7\u63a5\u7740\u770b\u6e90\u7801\u5f80\u4e0b\u8d70\u3002\\n\\n\x3c!-- truncate --\x3e\\n\\n## UpdateState\\nUpdateState \u7684\u8c03\u7528\u4f1a\u8c03\u7528 `grpc.ClientConn.updateResolverState` \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4e3b\u8981\u505a\u4e86\u5982\u4e0b\u5de5\u4f5c\uff1a\\n- ServiceConfig \u5904\u7406\\n- BalancerWrapper \u521b\u5efa\\n- \u8c03\u7528 `balancer.updateClientConnState` \u65b9\u6cd5 \u6267\u884c\u8d1f\u8f7d\u5747\u8861\u903b\u8f91\u66f4\u65b0\\n\\n```go\\nfunc (cc *ClientConn) updateResolverState(s resolver.State, err error) error {\\n    ...\\n    cc.maybeApplyDefaultServiceConfig(s.Addresses)\\n    ...\\n    cc.applyServiceConfigAndBalancer(sc, configSelector, s.Addresses)\\n    ...\\n    // reference: balancer_conn_wrappers.go:164\\n    // bw.updateClientConnState -> ccBalancerWrapper.updateClientConnState\\n    bw.updateClientConnState(&balancer.ClientConnState{ResolverState: s, BalancerConfig: balCfg})\\n    ...\\n}\\n```\\n> ### \u6e29\u99a8\u63d0\u793a\\n> \u8fd9\u91cc\u5148\u4ee5\u641e\u61c2 gRPC \u4e3b\u6d41\u7a0b\u601d\u8def\u4e3a\u4e3b\uff0c\u4e0d\u6263\u592a\u7ec6\u8282\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u4e00\u4e9b `GRPCLB` \u5904\u7406\u3001error\u5904\u7406\uff0cServiceConfigSelector \u5904\u7406\u7b49\u53ef\u4ee5\u67e5\u770b\u6e90\u7801\u3002\\n\\n`bw.updateClientConnState` \u8c03\u7528\u672c\u8d28\u662f `ccBalancerWrapper.updateClientConnState`\\n\u800c `ccBalancerWrapper.updateClientConnState` \u5c31\u505a\u4e86\u4e00\u4ef6\u4e8b\u60c5\uff0c\u8c03\u7528 `balancer.Balancer.UpdateClientConnState` \u65b9\u6cd5\\n```go\\nfunc (ccb *ccBalancerWrapper) updateClientConnState(ccs *balancer.ClientConnState) error {\\n    ccb.balancerMu.Lock()\\n    defer ccb.balancerMu.Unlock()\\n    return ccb.balancer.UpdateClientConnState(*ccs)\\n}\\n```\\n\\n\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u60f3\u770b `balancer` \u6e90\u7801\u903b\u8f91\u6709\u4e24\u79cd\u9014\u5f84\\n- \u81ea\u5df1\u5b9e\u73b0\u7684 `balancer.Balancer`\\n- gRPC \u63d0\u4f9b\u7684 `balancer`\\n\\n\u4e3a\u4e86\u9605\u8bfb\u6e90\u7801\uff0c\u6211\u4eec\u5148\u53bb\u9605\u8bfb gRPC \u63d0\u4f9b\u7684\u51e0\u4e2a `balancer` \u4e2d\u7684\u4e00\u4e2a\u8fdb\u884c\u6d41\u7a0b\u7406\u89e3\uff0c\u540e\u7eed\u518d\u4ecb\u7ecd\u5982\u4f55\u81ea\u5b9a\u4e49\u4e00\u4e2a `balancer`\\n\\n## gRPC Balancer\\ngRPC \u63d0\u4f9b\u4e86\u51e0\u4e2a\u8d1f\u8f7d\u5747\u8861\u5904\u7406\uff0c\u5982\u4e0b\uff1a\\n- grpclb\\n- rls\\n- roundrobin\\n- weightroundrobin\\n- weighttarget\\n\\n\u4e3a\u4e86\u597d\u7406\u89e3\uff0c\u6211\u4eec\u6311\u4e00\u4e2a\u7b80\u5355\u7684\u8d1f\u8f7d\u5747\u8861\u5668 `roundrobin` \u7ee7\u7eed\u9605\u8bfb\u3002\\n\\n\u8d1f\u8f7d\u5747\u8861\u4ece\u54ea\u91cc\u83b7\u53d6\uff1f\u901a\u8fc7\u524d\u9762 `cc.maybeApplyDefaultServiceConfig(s.Addresses)` \u65b9\u6cd5\u4e2d\u7684\u6e90\u7801\u53ef\u77e5\uff0c`balancer.Balancer` \u7531 `balancer.Builder`\\n\u63d0\u4f9b\uff0c\u6211\u4eec\u770b\u4e00\u4e0b `balancer.Builder` \u63a5\u53e3\\n```go\\n// Builder creates a balancer.\\ntype Builder interface {\\n    // Build creates a new balancer with the ClientConn.\\n    Build(cc ClientConn, opts BuildOptions) Balancer\\n    // Name returns the name of balancers built by this builder.\\n    // It will be used to pick balancers (for example in service config).\\n    Name() string\\n}\\n```\\n\\n## roundrobin\\nroundrobin \u662f gRPC \u5185\u7f6e\u7684\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u5176\u548c `resolver` \u4e00\u6837\u90fd\u662f\u901a\u8fc7\u63d2\u4ef6\u5f0f\u7f16\u7a0b\u63d0\u4f9b\u6269\u5c55\uff0c\u5728\u6e90\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u77e5\uff0c\\nroundrobin \u5728 `init` \u51fd\u6570\u4e2d\u5bf9 `balancer.Builder` \u8fdb\u884c\u4e86\u6ce8\u518c\uff0c\u5176\u4e2d `baseBuilder` \u662f `balancer.Builder` \u7684\u5b9e\u73b0\uff0c\\n\u4e0a\u6587\u6211\u4eec\u5f97\u77e5\uff0c `balancer.Balancer` \u7531 `balancer.Builder.Build` \u63d0\u4f9b\uff0c\u901a\u8fc7 `baseBuilder.Build` \u65b9\u6cd5\u6211\u4eec\u77e5\u9053 gRPC \u7684\\n`balancer` \u5e95\u5c42\u662f\u7531 `baseBalancer` \u5b9e\u73b0\uff0c\u90e8\u5206\u6e90\u7801\u5982\u4e0b\uff1a\\n\\nroundrobin.go\\n```go\\n// newBuilder creates a new roundrobin balancer builder.\\nfunc newBuilder() balancer.Builder {\\n    return base.NewBalancerBuilder(Name, &rrPickerBuilder{}, base.Config{HealthCheck: true})\\n}\\n\\nfunc init() {\\n    balancer.Register(newBuilder())\\n}\\n```\\n\\nbalancer.go\\n```go\\nfunc (bb *baseBuilder) Build(cc balancer.ClientConn, opt balancer.BuildOptions) balancer.Balancer {\\n    bal := &baseBalancer{\\n        cc:            cc,\\n        pickerBuilder: bb.pickerBuilder,\\n    \\n        subConns: resolver.NewAddressMap(),\\n        scStates: make(map[balancer.SubConn]connectivity.State),\\n        csEvltr:  &balancer.ConnectivityStateEvaluator{},\\n        config:   bb.config,\\n    }\\n    bal.picker = NewErrPicker(balancer.ErrNoSubConnAvailable)\\n    return bal\\n}\\n```\\n\\n\u6cbf\u7740 `UpdateState` \u73af\u8282\u6700\u540e\u4e00\u4e2a\u65b9\u6cd5 `ccb.balancer.UpdateClientConnState(*ccs)` \u8c03\u7528\u9605\u8bfb\uff0c\u5176\u5b9e\u6700\u7ec8\u6765\u5230\u4e86\\n`baseBalancer.UpdateClientConnState` \u65b9\u6cd5\uff0c\u6211\u4eec\u67e5\u770b\u4e00\u4e0b\u6e90\u7801\uff1a\\n\\n```go\\nfunc (b *baseBalancer) UpdateClientConnState(s balancer.ClientConnState) error {\\n    ...\\n    addrsSet := resolver.NewAddressMap()\\n    for _, a := range s.ResolverState.Addresses {\\n        addrsSet.Set(a, nil)\\n        if _, ok := b.subConns.Get(a); !ok {\\n            sc, err := b.cc.NewSubConn([]resolver.Address{a}, balancer.NewSubConnOptions{HealthCheckEnabled: b.config.HealthCheck})\\n            if err != nil {\\n                logger.Warningf(\\"base.baseBalancer: failed to create new SubConn: %v\\", err)\\n                continue\\n            }\\n            b.subConns.Set(a, sc)\\n            b.scStates[sc] = connectivity.Idle\\n            b.csEvltr.RecordTransition(connectivity.Shutdown, connectivity.Idle)\\n            sc.Connect()\\n        }\\n    }\\n    for _, a := range b.subConns.Keys() {\\n        sci, _ := b.subConns.Get(a)\\n        sc := sci.(balancer.SubConn)\\n        if _, ok := addrsSet.Get(a); !ok {\\n            b.cc.RemoveSubConn(sc)\\n            b.subConns.Delete(a)\\n        }\\n    }\\n    if len(s.ResolverState.Addresses) == 0 {\\n        b.ResolverError(errors.New(\\"produced zero addresses\\"))\\n        return balancer.ErrBadResolverState\\n    }\\n    return nil\\n}\\n```\\n\\n\u4ece\u6e90\u7801\u5f97\u77e5\uff0c\u8be5\u65b9\u6cd5\u505a\u4e86\u4ee5\u4e0b\u51e0\u4ef6\u4e8b\uff1a\\n- \u5bf9\u65b0\u7684 endpoint `NewSubConn` \u5e76\u4e14 `Connect`\\n- \u79fb\u51fa\u65e7\u7684\u5df2\u7ecf\u4e0d\u5b58\u5728\u7684 `endpoint` \u53ca\u5176 `Conn` \u4fe1\u606f\\n\\n\u603b\u7684\u6765\u8bf4\u5c31\u662f\u66f4\u65b0\u8d1f\u8f7d\u5747\u8861\u5668\u5185\u53ef\u7528\u7684\u94fe\u63a5\u4fe1\u606f\u3002\\n\\n### balancer.ClientConn.NewSubConn\\n`balancer.ClientConn` \u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u5176\u4ee3\u8868 gRPC \u7684\u4e00\u4e2a\u94fe\u63a5\uff0c\u800c `ccBalancerWrapper` \u5c31\u4e3a\u5176\u5b9e\u73b0\u7c7b\uff0c\u5148\u770b\u770b\u8be5\u63a5\u53e3\u7684\u58f0\u660e\uff1a\\n```go\\ntype ClientConn interface {\\n    // NewSubConn \u5e73\u8861\u5668\u8c03\u7528 NewSubConn \u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684SubConn\uff0c\u5b83\u4e0d\u4f1a\u963b\u585e\u5e76\u7b49\u5f85\u5efa\u7acb\u8fde\u63a5\uff0c\\n    // SubConn \u7684\u884c\u4e3a\u53ef\u4ee5\u901a\u8fc7 NewSubConnOptions \u6765\u63a7\u5236\u3002\\n    NewSubConn([]resolver.Address, NewSubConnOptions) (SubConn, error)\\n\\n    // RemoveSubConn \u4eceClientConn \u4e2d\u5220\u9664SubConn \u3002 SubConn\u5c06\u5173\u95ed\u3002\\n    RemoveSubConn(SubConn)\\n    // UpdateAddresses \u66f4\u65b0\u4f20\u5165\u7684SubConn \u4e2d\u4f7f\u7528\u7684\u5730\u5740\uff0c gRPC \u68c0\u67e5\u5f53\u524d\u8fde\u63a5\u7684\u5730\u5740\u662f\u5426\u4ecd\u5728\u65b0\u5217\u8868\u4e2d\u3002 \u5982\u679c\u5b58\u5728\uff0c\u5c06\u4fdd\u6301\u8fde\u63a5\uff0c\\n    // \u5426\u5219\uff0c\u8fde\u63a5\u5c06\u6b63\u5e38\u5173\u95ed\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u8fde\u63a5\u3002\\n    // \u8fd9\u5c06\u89e6\u53d1SubConn\u7684\u72b6\u6001\u8f6c\u6362\u3002\\n    \\n    UpdateAddresses(SubConn, []resolver.Address)\\n    \\n    // UpdateState \u901a\u77e5 gRPC \u5e73\u8861\u5668\u7684\u5185\u90e8\u72b6\u6001\u5df2\u66f4\u6539\u3002\\n    // gRPC \u5c06\u66f4\u65b0ClientConn\u7684\u8fde\u63a5\u72b6\u6001\uff0c\u5e76\u5728\u65b0\u7684Picker\u4e0a\u8c03\u7528 Pick \u6765\u9009\u62e9\u65b0\u7684 SubConn\u3002\\n    UpdateState(State)\\n    \\n    // \u5e73\u8861\u5668\u8c03\u7528 ResolveNow \u4ee5\u901a\u77e5 gRPC \u8fdb\u884c\u540d\u79f0\u89e3\u6790\u3002\\n    ResolveNow(resolver.ResolveNowOptions)\\n    \\n    // Target \u8fd4\u56de\u6b64ClientConn\u7684\u62e8\u53f7\u76ee\u6807\u3002\\n    // \u5df2\u5f03\u7528\uff1a\u6539\u7528BuildOptions\u4e2d\u7684 Target \u5b57\u6bb5\\n    Target() string\\n}\\n```\\n\\n\u518d\u770b\u4e00\u4e0b `ccBalancerWrapper` \u7684\u521b\u5efa:\\n```go\\nfunc newCCBalancerWrapper(cc *ClientConn, b balancer.Builder, bopts balancer.BuildOptions) *ccBalancerWrapper {\\n    ccb := &ccBalancerWrapper{\\n        cc:       cc,\\n        updateCh: buffer.NewUnbounded(),\\n        closed:   grpcsync.NewEvent(),\\n        done:     grpcsync.NewEvent(),\\n        subConns: make(map[*acBalancerWrapper]struct{}),\\n    }\\n    go ccb.watcher()\\n    ccb.balancer = b.Build(ccb, bopts)\\n    _, ccb.hasExitIdle = ccb.balancer.(balancer.ExitIdler)\\n    return ccb\\n}\\n```\\n> ### \u6ce8\u610f\\n> \u8bb0\u4f4f `go ccb.watcher()` \u8fd9\u4e00\u884c\u4ee3\u7801\uff0c\u540e\u7eed\u8fd8\u4f1a\u56de\u5230\u8fd9\u4e2a\u65b9\u6cd5\u6765\u3002\\n\\n\\n`baseBalancer.UpdateClientConnState` \u4e2d\u5bf9\u65b0\u52a0\u5165\u7684 `endpoint` \u8fdb\u884c `NewSubConn` \u548c `Connect` \u5904\u7406\uff0c\u6211\u4eec\u5148\u6765\u770b\u770b `NewSubConn` \u65b9\u6cd5\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5\uff0c\\n\u6765\u5230 `ccBalancerWrapper.NewSubConn` \u65b9\u6cd5\u4e2d:\\n```go\\nfunc (ccb *ccBalancerWrapper) NewSubConn(addrs []resolver.Address, opts balancer.NewSubConnOptions) (balancer.SubConn, error) {\\n\\tif len(addrs) <= 0 {\\n\\t\\treturn nil, fmt.Errorf(\\"grpc: cannot create SubConn with empty address list\\")\\n\\t}\\n\\tccb.mu.Lock()\\n\\tdefer ccb.mu.Unlock()\\n\\tif ccb.subConns == nil {\\n\\t\\treturn nil, fmt.Errorf(\\"grpc: ClientConn balancer wrapper was closed\\")\\n\\t}\\n\\tac, err := ccb.cc.newAddrConn(addrs, opts)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\tacbw := &acBalancerWrapper{ac: ac}\\n\\tacbw.ac.mu.Lock()\\n\\tac.acbw = acbw\\n\\tacbw.ac.mu.Unlock()\\n\\tccb.subConns[acbw] = struct{}{}\\n\\treturn acbw, nil\\n}\\n```\\n\u4ece\u8be5\u65b9\u6cd5\u53ef\u77e5\uff0c\u4e3b\u8981\u662f\u901a\u8fc7 `gprc.ClientConn.newAddrConn` \u521b\u5efa\u4e00\u4e2a `addrConn` \u5bf9\u8c61\uff0c\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a\\n`balancer.SubConn` \u7684\u5b9e\u73b0\u7c7b\u5bf9\u8c61 `acBalancerWrapper`\uff0c\u5c06\u5176\u52a0\u5165\u5230 `ccBalancerWrapper.subConns` \u4e2d\u8fdb\u884c\u7ba1\u7406\u3002\\n\\n> ### \u8bf4\u660e\\n> \u7531\u6b64\u53ef\u77e5\uff0c`baseBalancer.UpdateClientConnState` \u5224\u65ad\u5730\u5740\u53d8\u66f4\u540e\u7684 address \u662f\u5426\u4e3a\u65b0\u52a0\u5165\u7684\u5c31\u7531\\n> `ccBalancerWrapper.subConns` \u6765\u5bf9\u6bd4\u5373\u53ef\u5f97\u77e5\u3002\\n\\n\u63a5\u7740\u6211\u4eec\u7ee7\u7eed\u770b\u770b `Connect` \u505a\u4e86\u4ec0\u4e48\u4e8b\u60c5\uff0c\u4e0a\u9762\u5df2\u7ecf\u901a\u8fc7 `acBalancerWrapper` \u521b\u5efa\u4e86\u4e00\u4e2a `balancer.SubConn` \u7684\u5b9e\u73b0\u5bf9\u8c61\uff0c\u63a5\u7740\u5229\u7528\u8be5\u5bf9\u8c61\u8fdb\u884c\u4e86\\n`Connect` \u65b9\u6cd5\u8c03\u7528\uff0c\u6211\u4eec\u6765\u5230 `acBalancerWrapper.Connect()` \u65b9\u6cd5\u4e2d\uff1a\\n```go\\nfunc (acbw *acBalancerWrapper) Connect() {\\n    acbw.mu.Lock()\\n    defer acbw.mu.Unlock()\\n    go acbw.ac.connect()\\n}\\n```\\n\\n```go\\nfunc (ac *addrConn) connect() error {\\n    ac.mu.Lock()\\n    if ac.state == connectivity.Shutdown {\\n        ac.mu.Unlock()\\n        return errConnClosing\\n    }\\n    if ac.state != connectivity.Idle {\\n        ac.mu.Unlock()\\n        return nil\\n    }\\n    ac.updateConnectivityState(connectivity.Connecting, nil)\\n    ac.mu.Unlock()\\n    \\n    ac.resetTransport()\\n    return nil\\n}\\n```\\n\\n`ac.updateConnectivityState` \u66f4\u65b0\u94fe\u63a5\u72b6\u6001\uff0c`ac.resetTransport` \u4e3b\u8981\u5de5\u4f5c\u5185\u5bb9\u5c31\u662f\u4ece `resolver.Address` \u5217\u8868\u4e2d\u6309\u7167\u53bb\u521b\u5efa\u94fe\u63a5\u5e76\u540c\u6837\u8c03\u7528 `ac.updateConnectivityState` \u66f4\u65b0\u72b6\u6001\uff0c\u5177\u4f53\u6e90\u7801\u53ef\u81ea\u884c\u9605\u8bfb\uff0c\\n\u6211\u4eec\u63a5\u7740 `ac.updateConnectivityState` \u65b9\u6cd5\u5f80\u4e0b\u8d70\uff0c\u5176\u5b9e\u8be5\u65b9\u6cd5\u8c03\u7528\u4e86 `grpc.ClientConn.handleSubConnStateChange` \u65b9\u6cd5\uff0c\u6700\u7ec8\u53c8\u56de\u5230\u4e86 `ccBalancerWrapper.handleSubConnStateChange` \u65b9\u6cd5\u4e2d\uff0c\u5176\u65b9\u6cd5\u8c03\u7528\u94fe\u5982\u4e0b\uff1a\\n\\n`ac.updateConnectivityState` -> `grpc.ClientConn.handleSubConnStateChange` -> `ccBalancerWrapper.handleSubConnStateChange`\\n\\n\u6765\u770b\u4e00\u4e0b\u6700\u540e\u4e00\u4e2a\u65b9\u6cd5 `ccBalancerWrapper.handleSubConnStateChange` \u7684\u6e90\u7801\uff1a\\n```go\\nfunc (ccb *ccBalancerWrapper) handleSubConnStateChange(sc balancer.SubConn, s connectivity.State, err error) {\\n\\tif sc == nil {\\n\\t\\treturn\\n\\t}\\n\\tccb.updateCh.Put(&scStateUpdate{\\n\\t\\tsc:    sc,\\n\\t\\tstate: s,\\n\\t\\terr:   err,\\n\\t})\\n}\\n```\\n\\n\u8be5\u65b9\u6cd5\u628a\u4e00\u4e2a `balancer.SubConn` \u548c `connectivity.State` \u4e22\u8fdb\u4e86\u4e00\u4e2a\u5207\u7247\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e2a channel \u63a7\u5236\u53e6\u4e00\u4e2a goroutine \u53d6\u6570\u636e\\n```go\\nfunc (b *Unbounded) Put(t interface{}) {\\n\\tb.mu.Lock()\\n\\tif len(b.backlog) == 0 {\\n\\t\\tselect {\\n\\t\\tcase b.c <- t:\\n\\t\\t\\tb.mu.Unlock()\\n\\t\\t\\treturn\\n\\t\\tdefault:\\n\\t\\t}\\n\\t}\\n\\tb.backlog = append(b.backlog, t)\\n\\tb.mu.Unlock()\\n}\\n```\\n\\n\u8fd9\u91cc\u7684\u6570\u636e\u5199\u5165\u540e\uff0c\u5728\u54ea\u91cc\u8bfb\u53d6\uff0c\u8fd9\u5c31\u56de\u5230\u4e0a\u6587\u9700\u8981\u5927\u5bb6\u91cd\u70b9\u8bb0\u4f4f\u7684\u4e00\u4e2a goroutine \u8c03\u7528\u4e86\uff0c\u8fd8\u8bb0\u5f97\u5417\uff0c\u8bd5\u7740\u56de\u5fc6\u4e00\u4e0b\uff0c\u6ca1\u9519\u5c31\u662f `go ccb.watcher()`\\n\\n\u6211\u4eec\u6765\u770b\u770b `watcher` \u65b9\u6cd5\uff0c\u7531\u4e0a\u6587\u53ef\u77e5\uff0c\u6211\u4eec\u5199\u5982\u7684\u6570\u636e\u662f `scStateUpdate` \u5bf9\u8c61\uff0c\u56e0\u6b64\u5982\u4e0b\u6e90\u7801\u5c31\u4ec5\u770b\u83b7\u53d6\u8be5\u5bf9\u8c61\u7684 case \u5373\u53ef\uff0c\u7701\u7565\u4e86\u6682\u65f6\u4e0d\u9700\u8981\u5173\u6ce8\u7684\u4ee3\u7801\uff1a\\n```go\\nfunc (ccb *ccBalancerWrapper) watcher() {\\n\\tfor {\\n\\t\\tselect {\\n\\t\\tcase t := <-ccb.updateCh.Get():\\n\\t\\t\\tccb.updateCh.Load()\\n\\t\\t\\tif ccb.closed.HasFired() {\\n\\t\\t\\t\\tbreak\\n\\t\\t\\t}\\n\\t\\t\\tswitch u := t.(type) {\\n\\t\\t\\tcase *scStateUpdate:\\n\\t\\t\\t\\tccb.balancerMu.Lock()\\n\\t\\t\\t\\tccb.balancer.UpdateSubConnState(u.sc, balancer.SubConnState{ConnectivityState: u.state, ConnectionError: u.err})\\n\\t\\t\\t\\tccb.balancerMu.Unlock()\\n\\t\\t\\tcase ...:\\n\\t\\t\\t\\t...\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tlogger.Errorf(\\"ccBalancerWrapper.watcher: unknown update %+v, type %T\\", t, t)\\n\\t\\t\\t}\\n\\t\\tcase <-ccb.closed.Done():\\n\\t\\t}\\n        ...\\n\\t}\\n}\\n\\n```\\n\u7531\u6e90\u7801\u5f97\u77e5\uff0c\u5176\u6700\u7ec8\u8c03\u7528\u4e86 `balancer.Balancer.UpdateSubConnState` \u65b9\u6cd5\uff0c\u6211\u4eec\u4ee5 `roundrobin` \u8d1f\u8f7d\u5747\u8861\u5668\u6765\u67e5\u770b\uff0c\u7531\u4e0a\u6587\u77e5\uff0cgRPC \u7684 `balancer` \u6700\u7ec8\u5b9e\u73b0\u7c7b\u662f\\n`baseBalancer`\uff0c \u56e0\u6b64 `balancer.Balancer.UpdateSubConnState` \u6700\u7ec8\u843d\u5230\u4e86 `baseBalancer.UpdateSubConnState` \u65b9\u6cd5\u4e0a\uff0c\\n```go\\nfunc (b *baseBalancer) UpdateSubConnState(sc balancer.SubConn, state balancer.SubConnState) {\\n    s := state.ConnectivityState\\n    ...\\n    oldS, ok := b.scStates[sc]\\n    if !ok {\\n        ...\\n        return\\n    }\\n    if oldS == connectivity.TransientFailure &&\\n        (s == connectivity.Connecting || s == connectivity.Idle) {\\n        if s == connectivity.Idle {\\n            sc.Connect()\\n        }\\n        return\\n    }\\n    b.scStates[sc] = s\\n    switch s {\\n    case connectivity.Idle:\\n        sc.Connect()\\n    case connectivity.Shutdown:\\n        // When an address was removed by resolver, b called RemoveSubConn but\\n        // kept the sc\'s state in scStates. Remove state for this sc here.\\n        delete(b.scStates, sc)\\n    case connectivity.TransientFailure:\\n        // Save error to be reported via picker.\\n        b.connErr = state.ConnectionError\\n    }\\n    \\n    b.state = b.csEvltr.RecordTransition(oldS, s)\\n    ...\\n    if (s == connectivity.Ready) != (oldS == connectivity.Ready) ||\\n        b.state == connectivity.TransientFailure {\\n        b.regeneratePicker()\\n    }\\n    b.cc.UpdateState(balancer.State{ConnectivityState: b.state, Picker: b.picker})\\n}\\n```\\n\u8be5\u65b9\u6cd5\u4e2d\u6700\u7ec8\u53ea\u4f1a\u6709\u72b6\u6001 `connectivity.Ready` \u7684 `SubConn` \u5f80\u4e0b\u8d70\uff0c\u5176\u4ed6\u7684\u72b6\u6001\u8981\u4e48\u88ab\u91cd\u65b0\u53d1\u8d77 `Connect`\uff0c\u8981\u4e48\u88ab\u79fb\u51fa\\n\u6700\u540e\u4e00\u884c\u4ee3\u7801\u53d1\u8d77 `balancer.ClientConn.UpdateState` \u8c03\u7528\uff0c\u56e0\u4e3a `ccBalancerWrapper` \u4e3a `balancer.ClientConn` \u7684\u5b9e\u73b0\uff0c\u56e0\u6b64\u6765\u5230\\n`balancer.ClientConn.UpdateState` \u4e0b\uff0c\u8be5\u65b9\u6cd5\u505a\u4e86\u4e24\u4ef6\u4e8b\u60c5\uff1a\\n- \u66f4\u65b0 `balancer.Picker`\\n- \u8c03\u7528 `grpc.connectivityStateManager.updateState` \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u91ca\u653e\u4e00\u4e2a channel \u4fe1\u53f7\uff0c\u901a\u77e5 goroutine \u8fdb\u884c\u4fe1\u606f\u5904\u7406\uff0c\u8be5 goroutine \u6211\u4eec\u540e\u7eed\u518d\u8bb2\u3002\\n\\n\u4e0a\u6587\u8bb2\u4e86\u8fd9\u4e48\u591a\uff0c\u90a3\u4e48\u8d1f\u8f7d\u7b97\u6cd5\u5728\u54ea\u91cc\uff0c\u53c8\u4f55\u65f6\u8c03\u7528\u5462\uff1f\\n\u7531\u4e0a\u6587\u53ef\u77e5\uff0c`baseBalancer.UpdateSubConnState` \u66f4\u65b0\u4e86\u4e00\u4e2a `picker`\uff0c\u8fd9\u4e2a `picker` \u6765\u81ea\u54ea\u91cc\uff1f\u8ffd\u6eaf\u4e00\u4e0b\u6e90\u7801\u7ed3\u5408 `roundrobin` \u8d1f\u8f7d\u5747\u8861\u5668\u53ef\u77e5\uff0c\u8be5 `picker`\u662f\u5728\\n`balancer.Builder` \u7684\u5b9e\u73b0\u7c7b\u8c03\u7528 `base.NewBalancerBuilder` \u521b\u5efa\u5b9e\u4f8b\u65f6\u4f20\u5165\u7684 `base.PickBuilder` \u5b9e\u73b0\u7c7b `rrPickerBuilder` \u6784\u9020\u51fa\u6765\u7684\uff0c\u770b\u4e00\u4e0b `rrPickerBuilder`\\n\u7684\u6e90\u7801\u53ef\u77e5 `Pick` \u65b9\u6cd5\u4e2d\u5c31\u662f\u5bf9 `SubConn` \u8fdb\u884c\u8d1f\u8f7d\u7b97\u6cd5\u7684\u5177\u4f53\u903b\u8f91\u4e86\u3002\\n```go\\nfunc (p *rrPicker) Pick(balancer.PickInfo) (balancer.PickResult, error) {\\n    p.mu.Lock()\\n    sc := p.subConns[p.next]\\n    p.next = (p.next + 1) % len(p.subConns)\\n    p.mu.Unlock()\\n    return balancer.PickResult{SubConn: sc}, nil\\n}\\n```\\n\\n\u90a3\u4e48\u8be5\u65b9\u6cd5\u4ec0\u4e48\u65f6\u5019\u8c03\u7528\u5462\uff1f\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u7b54\u6848\uff0c\u5728 `grpc.ClientConn` \u53d1\u8d77 `Invoke` \u65b9\u6cd5\u8c03\u7528\u65f6\u4f1a\u901a\u8fc7\u8c03\u7528\u94fe\u8c03\u7528\u5230\uff0c\u6211\u4eec\u540e\u7eed\u6e90\u7801\u9605\u8bfb\u5230\u90a3\u91cc\u5728\u6765\u5206\u6790\u3002\\n\\n## \u81ea\u5b9a\u4e49\u8d1f\u8f7d\u5747\u8861\u5668\\n\u81ea\u5b9a\u4e49\u8d1f\u8f7d\u5747\u8861\u5668\u9996\u5148\u9700\u8981\u4e86\u89e3  gRPC \u7684\u63d2\u4ef6\u5f0f\u7f16\u7a0b\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u53ef\u4ee5\u81ea\u884c google\u3002\\n\\n### \u73af\u5883\\netcd\\ngo\\n\\n### \u8d1f\u8f7d\u5747\u8861\u76ee\u6807\\n\u968f\u673a\u9009\u62e9\\n\\n1. \u5b9e\u73b0 `balancer.Builder`\\n   \u6211\u4eec\u5c31\u4e0d\u4e00\u4e00\u5b9e\u73b0\u5176\u65b9\u6cd5\u4e86\uff0c\u56e0\u4e3a\u8d1f\u8f7d\u5747\u8861\u5668\u7684\u91cd\u70b9\u5728\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\uff0c\u5373\u5b9e\u73b0 `base.PickerBuilder`\uff0c\u6211\u4eec\u76f4\u63a5\u7528 gRPC \u63d0\u4f9b\u7684 `base.NewBalancerBuilder` \u6765\u521b\u5efa `balancer.Builder`\\n```go\\nconst Name = \\"random\\"\\n\\nfunc init() {\\n    balancer.Register(newBuilder())\\n}\\n\\nfunc newBuilder() balancer.Builder {\\n    return base.NewBalancerBuilder(Name, &randomPickerBuilder{}, base.Config{HealthCheck: true})\\n}\\n```\\n\\n2. \u5b9e\u73b0 `base.PickerBuilder`\\n```go\\nfunc (r *randomPickerBuilder) Build(info base.PickerBuildInfo) balancer.Picker {\\n    if len(info.ReadySCs) == 0 {\\n        return base.NewErrPicker(balancer.ErrNoSubConnAvailable)\\n    }\\n    readyScs := make([]Conn, 0, len(info.ReadySCs))\\n    for sc, info := range info.ReadySCs {\\n        readyScs = append(readyScs, Conn{\\n            SubConn:     sc,\\n            SubConnInfo: info,\\n        })\\n    }\\n    return &randomPicker{\\n        subConns: readyScs,\\n        r:        rand.New(rand.NewSource(time.Now().UnixNano())),\\n    }\\n}\\n```\\n\\n3. \u5b9e\u73b0 `balancer.Picker`\\n   `balancer.Picker` \u624d\u662f\u6211\u4eec\u9700\u8981\u6269\u5c55\u7684\u903b\u8f91\uff0c\u5373\u6309\u7167\u81ea\u5df1\u60f3\u8981\u7684\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u4ece `SunConn` \u5217\u8868\u4e2d\u9009\u62e9\u4e00\u4e2a\u53ef\u7528\u7684 `SubConn` \u521b\u5efa\u94fe\u63a5\u3002\\n\\n```go\\nfunc (r *randomPicker) Pick(_ balancer.PickInfo) (balancer.PickResult, error) {\\n    next := r.r.Int() % len(r.subConns)\\n    sc := r.subConns[next]\\n    fmt.Printf(\\"picked: %+v\\\\n\\", sc.SubConnInfo.Address.Addr)\\n    return balancer.PickResult{\\n        SubConn: sc.SubConn,\\n    }, nil\\n}\\n```\\n\\n4. \u4f7f\u7528\u81ea\u5b9a\u4e49\u8d1f\u8f7d\u5747\u8861\u5668\\n```go\\nr := resolverBuilder.NewCustomBuilder(resolverBuilder.Scheme)\\noptions := []grpc.DialOption{grpc.WithInsecure(), grpc.WithResolvers(r), grpc.WithBalancerName(builder.Name)}\\nconn, err := grpc.Dial(resolverBuilder.Format(\\"grpc-server\\"), options...)\\n```\\n\\n### \u6f14\u793a\u6548\u679c\\n1. \u542f\u52a8\u591a\u4e2a server \u5b9e\u4f8b\uff0c\u6211\u8fd9\u91cc\u542f\u52a8\u4e86\u4e09\u4e2a\\n```shell\\n$ go run server.go -addr localhost:8888\\n```\\n```shell\\n$ go run server.go -addr localhost:8889\\n```\\n```shell\\n$ go run server.go -addr localhost:8890\\n```\\n\\n2. \u591a\u6b21\u542f\u52a8 client\uff0c\u89c2\u5bdf Pick \u7684\u65e5\u5fd7\u8f93\u51fa\\n```shell\\ngo run client.go\\nendpoints:  [localhost:8888 localhost:8889 localhost:8888 localhost:8889 localhost:8890]\\npicked: localhost:8888\\noutput:  hi\\n```\\n\\n```shell\\ngo run client.go\\nendpoints:  [localhost:8888 localhost:8889 localhost:8888 localhost:8889 localhost:8890]\\npicked: localhost:8890\\noutput:  hi\\n```\\n\\n```shell\\ngo run client.go\\nendpoints:  [localhost:8888 localhost:8889 localhost:8888 localhost:8889 localhost:8890]\\npicked: localhost:8889\\noutput:  hi\\n```\\n...\\n\\n## \u603b\u7ed3\\ngrpc \u901a\u8fc7\u670d\u52a1\u53d1\u73b0\u6216\u8005\u76f4\u8fde\u5f62\u5f0f\u83b7\u53d6\u5230 gRPC server \u7684\u5b9e\u4f8b\u7684 endpoints\uff0c\u7136\u540e\u901a\u77e5\u8d1f\u8f7d\u5747\u8861\u5668\u8fdb\u884c `SubConn` \u66f4\u65b0\uff0c\u5bf9\u4e8e\u65b0\u52a0\u5165\u7684 endpoint \u8fdb\u884c\u5b9e\u4f8b\u521b\u5efa\uff0c\u79fb\u51fa\u5e9f\u5f03\u7684 endpoint\uff0c\\n\u6700\u540e\u901a\u8fc7\u72b6\u6001\u66f4\u65b0\u5c06\u72b6\u6001\u4e3a `Ready` \u7684 `SubConn` \u8fdb\u884c\u7ba1\u7406\uff0cgRPC \u5728\u8c03\u7528 `Invoke` \uff08\u5373client \u53d1\u8d77\u8bf7\u6c42\uff09\u65f6\uff0c\u5219\u4f1a\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u5668\u4e2d\u7684 `Picker` \u53bb\u6309\u7167\u67d0\u4e00\u4e2a\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u9009\u62e9\u4e00\u4e2a `SubConn`\\n\u521b\u5efa\u94fe\u63a5\uff0c\u5982\u679c\u521b\u5efa\u6210\u529f\u5219\u4e0d\u518d\u8fdb\u884c\u5176\u4ed6 `SubConn` \u7684\u5c1d\u8bd5\uff0c\u5426\u5219\u4f1a\u6309\u7167\u4e00\u5b9a\u7684\u9000\u907f\u7b97\u6cd5\u8fdb\u884c\u91cd\u8bd5\uff0c\u76f4\u5230\u9000\u907f\u5931\u8d25\u6216\u8005\u521b\u5efa\u94fe\u63a5\u6210\u529f\u4e3a\u6b62\u3002\\n\\n\u81ea\u5b9a\u4e49\u8d1f\u8f7d\u5747\u8861\u5668\u7684\u6838\u5fc3\u903b\u8f91\u5728\u4e8e\u5bf9 `Picker` \u7684\u5b9e\u73b0\uff0c\u4ece `SubConn` \u5217\u8868\u4e2d\u6309\u7167\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u9009\u62e9\u4e00\u4e2a `SubConn` \u521b\u5efa\u94fe\u63a5\uff0c\u81ea\u5b9a\u4e49\u8d1f\u8f7d\u5747\u8861\u5668\u548c `Resolver` \u4e00\u6837\u90fd\u662f\u7528\u5230\u4e86\u63d2\u4ef6\u5f0f\u7f16\u7a0b\u63d0\u4f9b\u4e86\u6269\u5c55\u80fd\u529b\u3002\\n\\n\u672c\u6b21\u6e90\u7801\u9605\u8bfb\u53ea\u662f\u4e3a\u4e86\u7406\u89e3 gRPC \u7684\u8c03\u7528\u6d41\u7a0b\uff0c\u5176\u4e2d\u6709\u5f88\u591a\u7ec6\u8282\u5728\u6e90\u7801\u6ce8\u91ca\u4e2d\u6709\u8bf4\u660e\uff0c\u5176\u53ef\u4ee5\u52a0\u6df1\u6211\u4eec\u5bf9 gRPC \u7684\u7406\u89e3\uff0c\u56e0\u6b64\u5728\u7406\u89e3\u672c\u6587\u4ecb\u7ecd\u540e\uff0c\u53ef\u4ee5\u518d\u6b21\u9605\u8bfb\u6e90\u7801\u52a0\u6df1\u4e00\u4e0b\u7406\u89e3\u3002\\n\\n## \u6e90\u7801\\nhttps://github.com/anqiansong/golang-notes/tree/main/example/grpc/balancer"},{"id":"/go/grpc-resolver","metadata":{"permalink":"/go/grpc-resolver","source":"@site/blog/go/grpc-resolver.md","title":"gRPC \u6e90\u7801\u9605\u8bfb\u53ca\u5b9e\u8df5\u4e4b resolver","description":"cover","date":"2022-01-14T00:00:00.000Z","formattedDate":"2022\u5e741\u670814\u65e5","tags":[{"label":"gprc","permalink":"/tags/gprc"},{"label":"\u6e90\u7801\u5206\u6790","permalink":"/tags/\u6e90\u7801\u5206\u6790"}],"readingTime":4.12,"truncated":true,"authors":[{"name":"Keson","title":"\u5b57\u8282\u8df3\u52a8\u5f00\u53d1\u5de5\u7a0b\u5e08 /  goctl \u7ef4\u62a4\u4eba","url":"https://github.com/anqiansong","imageURL":"/img/logo.webp","key":"keson"}],"frontMatter":{"title":"gRPC \u6e90\u7801\u9605\u8bfb\u53ca\u5b9e\u8df5\u4e4b resolver","date":"2022-01-14T00:00:00.000Z","authors":"keson","tags":["gprc","\u6e90\u7801\u5206\u6790"]},"prevItem":{"title":"grpc \u6e90\u7801\u9605\u8bfb\u4e4b balancer","permalink":"/go/grpc-balaner"},"nextItem":{"title":"grpc\u6e90\u7801\u5b66\u4e60\u7b14\u8bb0(\u7c97\u6d45\u7248)","permalink":"/go/grpc"}},"content":"![cover](../resource/202201/grpc-resolver.png)\\n\\n\\n\u968f\u7740\u5fae\u670d\u52a1\u8d8a\u6765\u8d8a\u76db\u884c\uff0c\u670d\u52a1\u95f4\u7684\u901a\u4fe1\u4e5f\u662f\u7ed5\u4e0d\u5f00\u7684\u8bdd\u9898\uff0cgRPC \u5728\u4f17\u591a RPC \u6846\u67b6\u4e2d\u7b97\u5f97\u4e0a\u4f7c\u4f7c\u8005\uff0c\u4e0d\u4ec5\u5176\u6709\u4e00\u4e2a\u597d\u7238\u7238\uff0cgrpc \u5728\u6269\u5c55\u65b9\u9762\u4e5f\u7ed9\u5f00\u53d1\u8005\u7559\\n\u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff0c\u4eca\u5929\u6211\u4eec\u5c06\u8d70\u8fdbgrpc \u6269\u5c55\u4e4b Resolver\uff0cgRPC Resolver \u63d0\u4f9b\u4e86\u7528\u6237\u81ea\u884c\u89e3\u6790\u4e3b\u673a\u7684\u6269\u5c55\u80fd\u529b\uff0c\u6211\u4eec\u5728\u4f7f\u7528 gRPC \u65f6\uff0c\u5927\u5bb6\u6709\u6ca1\u6709\u60f3\u8fc7\uff0c\\n\u4e3a\u4ec0\u4e48 gRPC \u4e3a\u4ec0\u4e48\u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u683c\u5f0f\u7684 target\uff1a\\n\x3c!-- truncate --\x3e\\n\\n- \u76f4\u8fde\uff0c \u94fe\u63a5 target \u4e3a\u76ee\u6807\u670d\u52a1\u7684endpoint\\n- dns \u670d\u52a1\u53d1\u73b0\\n- unix\\n\\n\u5176\u4e2d\u5728\u8fdb\u5165\u8fde\u63a5\u4e4b\u524d\uff0cgRPC \u4f1a\u6839\u636e\u7528\u6237\u662f\u5426\u63d0\u4f9b\u4e86 Resolver \u6765\u8fdb\u884c\u76ee\u6807\u670d\u52a1\u7684 endpoint \u89e3\u6790\uff0c\u4eca\u5929\u6211\u4eec\u6765\u5c1d\u8bd5\u5199\u4e00\u4e2a\u6700\u7b80\u5355\u7684 etcd \u505a\u670d\u52a1\u53d1\u73b0\u7684\u4f8b\u5b50\\n\\n\\n## \u8bf4\u660e\\n\u6e90\u7801\u9605\u8bfb\u7684 gRPC \u7248\u672c\u4e3a `3.5.1`\\n\\n## \u73af\u5883\\n- etcd \u5b89\u88c5\\n- go\\n\\n## \u601d\u8def\\n- \u6211\u4eec\u5c06\u4e3a server \u670d\u52a1\uff0c\u5047\u8bbe\u540d\u79f0\u4e3a `grpc-server` \u542f\u52a8\u591a\u4e2a\u5b9e\u4f8b\\n- \u4ee5 `grpc-server` \u4e3a key \u5411 etcd put \u6bcf\u4e2a\u5b9e\u4f8b\u7684 endpoint\\n   - \u771f\u6b63\u8fdb\u5165 etcd \u7684 key \u4e3a\u4ee5 `grpc-server` + `/` + `\u968f\u673a\u503c`\\n- \u5b9e\u73b0 resolver.Builder\uff0c \u83b7\u53d6 `target`\\n- \u4ece etcd \u8bfb\u53d6\u4ee5 `grpc-server` \u4e3a prefix \u7684 endpoints\\n- \u901a\u77e5\u8d1f\u8f7d\u5747\u8861\u5668\u91cd\u65b0 pick \u5b9e\u4f8b\\n\\n## \u5b9e\u73b0\\n\u5b9e\u73b0 resolver.Builder\\n\\n```go\\ntype customBuilder struct {\\n    scheme string\\n}\\n\\nfunc NewCustomBuilder(scheme string) resolver.Builder {\\n  return &customBuilder{\\n    scheme: scheme,\\n  }\\n}\\n\\nfunc (b *customBuilder) Build(target resolver.Target, cc resolver.ClientConn, opts resolver.BuildOptions) (resolver.Resolver, error) {\\n  var address []resolver.Address\\n  key := target.URL.Host\\n  hosts := pool.GetOr(key, nil)\\n  fmt.Println(hosts)\\n  for _, host := range hosts {\\n    address = append(address, resolver.Address{\\n        Addr: host,\\n    })\\n  }\\n  cc.UpdateState(resolver.State{Addresses: address})\\n  return &nopResolver{}, nil\\n}\\n\\nfunc (b *customBuilder) Scheme() string {\\n\\treturn Scheme\\n}\\n```\\n\\n## \u5e94\u7528\\n\u5728 client \u53d1\u8d77\u8c03\u7528\u65f6\u901a\u8fc7 `grpc.WithResolvers` DialOption \u544a\u77e5 gRPC\\n```go\\nr := builder.NewCustomBuilder(builder.Scheme)\\n\\tconn, err := grpc.Dial(builder.Format(\\"grpc-server\\"), grpc.WithInsecure(), grpc.WithResolvers(r))\\n```\\n\\ngrpc.Dial \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a `target`\uff0c\u56e0\u6b64 `target` \u5e76\u975e\u4e00\u5b9a\u662f\u76ee\u6807\u670d\u52a1\u7684 endpoint\uff08\u4ec5\u76f4\u8fde\u6a21\u5f0f\u624d\u4f20\u76ee\u6807\u670d\u52a1\u7684\u771f\u6b63 endpoint\uff09\uff0c\u4e5f\u53ef\u80fd\u662f\\n\u6307\u5411\u67d0\u4e00\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u7684\u9075\u5faa URL \u5730\u5740\u89c4\u8303\u7684\u4e00\u4e2a\u503c\uff0c\u4fbf\u4e8e\u5f00\u53d1\u8005\u81ea\u5b9a\u4e49 resolver.Builder \u6839\u636e `target` \u62ff\u5230\u76f8\u5e94\u4fe1\u606f\u53bb\u505a\u76ee\u6807\u670d\u52a1\u771f\u6b63\u7684 endpoints \u89e3\u6790\uff0c\\n\u5982\u4e0a\u6587\u7684 resolver.Builder \u5b9e\u73b0\u65b9\u6cd5\\n```go\\nBuild(target resolver.Target, cc resolver.ClientConn, opts resolver.BuildOptions) (resolver.Resolver, error)\\n```\\n\u65f6\uff0c\u5219\u6839\u636e\u89e3\u6790\u540e\u7684 `resolver.Target` \u62ff\u5230 etcd \u7684 key\uff0c\u518d\u53bb\u83b7\u53d6\u76ee\u6807\u670d\u52a1\u7684 endpoints\uff0c\u81f3\u4e8e\u89e3\u6790\u5b8c\u540e\u600e\u4e48\u901a\u77e5\u8d1f\u8f7d\u5747\u8861\u5668\u7684\u6211\u4eec\u540e\u7eed\u518d\u8bb2\u3002\\n\\n## \u793a\u4f8b\u7ed3\u679c\\n- \u542f\u52a8 etcd\\n```go\\n$ etcd\\n```\\n\\n- \u542f\u52a8\u4e24\u4e2a server\\n```go\\ngo run server.go -addr localhost:8888\\n```\\n```go\\ngo run server.go -addr localhost:8889\\n```\\n\\n- \u542f\u52a8 client\\n```go\\n$ go run client.go\\nendpoints: [localhost:8888 localhost:8889]\\noutput: hi\\n```\\n\\n## \u539f\u7406\\n\u6211\u4eec\u4ece client \u901a\u8fc7 `grpc.WithResolvers` \u544a\u77e5 gRPC resolver.Builder \u540e\uff0c\u4ed6\u662f\u600e\u4e48\u8c03\u7528\u6211\u4eec\u7ed9\u7684 resolver \u7684\uff1f\\n\u987a\u7740 `grpc.DialContext` \u6e90\u7801\u770b\u4e0b\u53bb\u5c31\u77e5\u9053\uff0cgRPC \u4f1a\u8c03\u7528\u4e00\u4e2a `ClientConn.parseTargetAndFindResolver` \u7684\u65b9\u6cd5\uff0c\u8be5\\n\u65b9\u6cd5\u505a\u4e86\u4e24\u4e2a\u5de5\u4f5c\uff1a\\n\\n- \u5c06 `grpc.DialContext` \u7684 `target` string\u503c\u901a\u8fc7 `parseTarget` \u89e3\u6790\u4e3a `resolver.Target`\uff0c\u65b0\u7248\u672c\u4e3a `URL` \u7684\u5305\u88c5\u4f53\\n- \u5bfb\u627e resolver\\n   - gRPC \u4f1a\u4f18\u5148\u4ece `resolver.Target` \u4e2d\u7684\u83b7\u53d6 `scheme` \u540d\u79f0\uff0c\u8be5\u503c\u5373\u4e3a\u5f00\u53d1\u8005\u5728\u5b9e\u73b0 `resolver.Builder` \u65f6 `Scheme() string` \u65b9\u6cd5\u8fd4\u56de\u503c\u4e00\u6837\u3002\\n   - gRPC \u53bb DialOption \u4e2d\u7684 resolver \u5217\u8868\u5bfb\u627e\u540d\u79f0\u76f8\u540c resolver\\n   - \u901a\u8fc7 `newCCResolverWrapper` \u65b9\u6cd5\u8c03\u7528 `resolver.Buidler.Build(target Target, cc ClientConn, opts BuildOptions) (Resolver, error)`\u65b9\u6cd5\u5b9e\u73b0\u89e3\u6790\\n   - \u544a\u77e5\u8d1f\u8f7d\u5747\u8861\u5668\u540e\u7eed\u5904\u7406\\n\\n### \u5206\u89e3\\n1. gRPC \u600e\u4e48\u77e5\u9053\u8be5\u83b7\u53d6\u90a3\u4e2a resolver.Builder\uff1f\\n   \u6211\u4eec\u5728\u901a\u8fc7 `grpc.DialContext` \u4f20\u9012\u7684 `target` \u4e00\u5b9a\u8981\u7b26\u5408 [gRPC\u89c4\u8303](https://github.com/grpc/grpc/blob/master/doc/naming.md)\\n   \u5176\u5b9e\u5c31\u662f\u7b26\u5408 `URL` \u683c\u5f0f\uff0c\u5982 `http://foo.com`\uff0c`http` \u5373\u4e3a scheme\uff0c\u6211\u4eec\u8fd9\u91cc `target` \u683c\u5f0f\u4e3a `custom://xxx`\uff0c`xxx` \u4e3a server \u7aef\u7684\u5b9e\u4f8b\u540d\u79f0\uff08\u5373 `grpc-server`\uff09\\n   \u8fd9\u6837\u6211\u4eec\u5c31\u544a\u8bc9\u4e86 gRPC \u8be5\u9009\u62e9 `scheme` \u4e3a `custom` \u7684 resolver.Builder\u3002\\n\\n2. gRPC \u5728\u54ea\u91cc\u627e\u5230 resolver.Builder \u7684\uff1f\\n   gRPC \u7684 resolver.Builder \u5e76\u4e0d\u4f1a\u65e0\u4e2d\u751f\u6709\uff0c\u800c\u662f\u6211\u4eec\u5728\u5b9e\u4f8b\u5316 `resolver.Buidler` \u7684\u5b9e\u73b0\u7c7b\u65f6\u8fdb\u884c\u6ce8\u518c\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u5199\u5230 gRPC \u5185\u90e8\u7684\u4e00\u4e2a\u5168\u5c40 map \u53d8\u91cf\u4e2d\u4e86\uff0c\\n   gRPC \u5728\u5bfb\u627e\u662f\u4e5f\u662f\u901a `scheme` \u4e3a key \u53bb\u8fd9\u4e2a map \u91cc\u627e\u3002\\n\\n- \u6ce8\u518c resolver.Builder\\n```go\\nfunc init() {\\n    resolver.Register(&customBuilder{})\\n}\\n```\\n```go\\nfunc Register(b Builder) {\\n    m[b.Scheme()] = b\\n}\\n```\\n\\n```go\\nvar (\\n    // m is a map from scheme to resolver builder.\\n    m = make(map[string]Builder)\\n    // defaultScheme is the default scheme to use.\\n    defaultScheme = \\"passthrough\\"\\n)\\n\\n```\\n- \u83b7\u53d6 resolver.Builder\\n\\n```go\\nfor _, rb := range cc.dopts.resolvers {\\n    if scheme == rb.Scheme() {\\n        return rb\\n    }\\n}\\nreturn resolver.Get(scheme)\\n```\\n\\n3. \u89e3\u6790 `target` \u4e3a `resolver.Target`\\n```go\\nfunc parseTarget(target string) (resolver.Target, error) {\\n  u, err := url.Parse(target)\\n  if err != nil {\\n      return resolver.Target{}, err\\n  }\\n  \\n  endpoint := u.Path\\n  if endpoint == \\"\\" {\\n      endpoint = u.Opaque\\n  }\\n  endpoint = strings.TrimPrefix(endpoint, \\"/\\")\\n  return resolver.Target{\\n      Scheme:    u.Scheme,\\n      Authority: u.Host,\\n      Endpoint:  endpoint,\\n      URL:       *u,\\n  }, nil\\n}\\n```\\n\\n## \u6e90\u7801\u4f4d\u7f6e\\n`clientconn.go:1622`\\n\\n## \u5176\u4ed6\\n\u5728 gRPC \u4e2d\uff0c\u50cf\u8fd9\u79cd register & get \u7684\u5f62\u5f0f\u6210\u4e3a\u63d2\u4ef6\u5f0f\u7f16\u7a0b\uff0c\u901a\u8fc7\u8fd9\u79cd\u624b\u6bb5\u7ed9\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u6269\u5c55\u5165\u53e3\uff0c\u9664 `resolver` \u5916\uff0c\\n`balancer`\u3001 `compressor` \u7b49\u90fd\u5229\u7528\u4e86\u8fd9\u4e2a\u624b\u6bb5\u63d0\u4f9b\u4e86\u6269\u5c55\u5165\u53e3\uff0c\u540e\u7eed\u6211\u4eec\u518d\u6765\u8ba8\u8bba\u3002\\n\\n## \u603b\u7ed3\\ngRPC \u7684 `grpc.Dial` \u6216\u8005 `gprc.DialContext` \u7684 `target` \u5e76\u975e\u4e00\u5b9a\u662f server \u7684 endpoint\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u6ee1\u8db3\u5f00\u53d1\u8005\u9700\u6c42\u7684\\n\u67d0\u7c7b\u7b26\u5408 `URL` \u547d\u540d\u98ce\u683c\u7684\u503c\uff0c\u5982\u672c demo \u4e2d\u662f server \u670d\u52a1\u5411 etcd \u6570\u636e\u5e93\u5b58\u50a8 server \u542f\u52a8\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u7684 endpoint \u7684 `key` \u7684 `prefix`\uff0c\\n\u5982\u679c\u7528\u6237\u6ca1\u6709\u63d0\u4f9b `resolver.Builder` \uff0c gRPC \u4f1a\u6839\u636e\u9ed8\u8ba4 `scheme` \uff08`resolver.GetDefaultScheme()`\uff09 \u53bb\u67e5\u627e\u3002\\n\\n## \u6e90\u7801\\nhttps://github.com/anqiansong/golang-notes/tree/main/example/grpc/resolver/builder/builder.go"},{"id":"/go/grpc","metadata":{"permalink":"/go/grpc","source":"@site/blog/go/grpc.md","title":"grpc\u6e90\u7801\u5b66\u4e60\u7b14\u8bb0(\u7c97\u6d45\u7248)","description":"cover","date":"2021-03-20T00:00:00.000Z","formattedDate":"2021\u5e743\u670820\u65e5","tags":[{"label":"gprc","permalink":"/tags/gprc"},{"label":"\u6e90\u7801\u5206\u6790","permalink":"/tags/\u6e90\u7801\u5206\u6790"}],"readingTime":8.603333333333333,"truncated":true,"authors":[{"name":"Keson","title":"\u5b57\u8282\u8df3\u52a8\u5f00\u53d1\u5de5\u7a0b\u5e08 /  goctl \u7ef4\u62a4\u4eba","url":"https://github.com/anqiansong","imageURL":"/img/logo.webp","key":"keson"}],"frontMatter":{"title":"grpc\u6e90\u7801\u5b66\u4e60\u7b14\u8bb0(\u7c97\u6d45\u7248)","date":"2021-03-20T00:00:00.000Z","authors":"keson","tags":["gprc","\u6e90\u7801\u5206\u6790"]},"prevItem":{"title":"gRPC \u6e90\u7801\u9605\u8bfb\u53ca\u5b9e\u8df5\u4e4b resolver","permalink":"/go/grpc-resolver"},"nextItem":{"title":"\u4e3a\u4ec0\u4e48\u770b\u4e86 N \u6b21 go module, \u5c31\u662f\u8bb0\u4e0d\u4f4f\uff1f","permalink":"/go/golang-module"}},"content":"![cover](../resource/202103/grpc.jpeg)\\n\\n\u672c\u6b21\u6e90\u7801\u9605\u8bfb\u7684\u76ee\u7684\u662f\u5e0c\u671b\u4e86\u89e3\u5230grpc\u4ececlient\u8c03\u7528\u5230server\u7aef\u54cd\u5e94\u7684\u6d41\u7a0b\uff0c\\n\u800c\u975e\u7cfb\u7edf\u6027\u7684\u5bf9\u6bcf\u4e2a\u903b\u8f91\u90fd\u8fdb\u884c\u5206\u6790\u548c\u8be6\u89e3\u3002\u5982\u679c\u80fd\u901a\u8fc7\u672c\u6b21\u5b66\u4e60\u5230\u9605\u8bfbgrpc\u6e90\u7801\u7684\\n\u7ebf\u7d22\u6216\u8005\u5927\u81f4\u4e86\u89e3\u5230\u5176\u5de5\u4f5c\u6d41\u7a0b\uff0c\u8fd9\u6b21\u9605\u8bfb\u5c31\u6709\u4ef7\u503c\u3002\\n\\n\u672c\u6b21\u9605\u8bfb\u4ee5\u4e00\u5143rpc\u4f7f\u7528\u4e3a\u5bfc\u5411\u3002\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u539f\u6587\u5730\u5740\\n* [grpc\u6e90\u7801\u5b66\u4e60\u7b14\u8bb0](https://github.com/anqiansong/golang-notes/blob/main/grpc.md)\\n## \u6211\u7684\u4e3b\u9875\\n* [https://github.com/anqiansong](https://github.com/anqiansong)\\n\\n## \u6982\u5ff5\\n\\n### rpc\\n\\n> \u5728\u5206\u5e03\u5f0f\u8ba1\u7b97\uff0c\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff08\u82f1\u8bed\uff1aRemote Procedure Call\uff0c\u7f29\u5199\u4e3a RPC\uff09\u662f\u4e00\u4e2a\u8ba1\u7b97\u673a\u901a\u4fe1\u534f\u8bae\u3002\u8be5\u534f\u8bae\u5141\u8bb8\u8fd0\u884c\u4e8e\u4e00\u53f0\u8ba1\u7b97\u673a\u7684\u7a0b\u5e8f\u8c03\u7528\u53e6\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4\uff08\u901a\u5e38\u4e3a\u4e00\u4e2a\u5f00\u653e\u7f51\u7edc\u7684\u4e00\u53f0\u8ba1\u7b97\u673a\uff09\u7684\u5b50\u7a0b\u5e8f\uff0c\\n> \u800c\u7a0b\u5e8f\u5458\u5c31\u50cf\u8c03\u7528\u672c\u5730\u7a0b\u5e8f\u4e00\u6837\uff0c\u65e0\u9700\u989d\u5916\u5730\u4e3a\u8fd9\u4e2a\u4ea4\u4e92\u4f5c\u7528\u7f16\u7a0b\uff08\u65e0\u9700\u5173\u6ce8\u7ec6\u8282\uff09\u3002RPC\u662f\u4e00\u79cd\u670d\u52a1\u5668-\u5ba2\u6237\u7aef\uff08Client/Server\uff09\u6a21\u5f0f\uff0c\u7ecf\u5178\u5b9e\u73b0\u662f\u4e00\u4e2a\u901a\u8fc7\u53d1\u9001\u8bf7\u6c42-\u63a5\u53d7\u56de\u5e94\u8fdb\u884c\u4fe1\u606f\u4ea4\u4e92\u7684\u7cfb\u7edf\u3002\u2014\u2014 [\u7ef4\u57fa\u767e\u79d1](https://zh.wikipedia.org/wiki/%E9%81%A0%E7%A8%8B%E9%81%8E%E7%A8%8B%E8%AA%BF%E7%94%A8)\\n\\n### grpc\\ngrpc\u662fgoogle\u7684\u5f00\u6e90rpc\u7cfb\u7edf\uff0c\u8be5\u7cfb\u7edf\u57fa\u4e8e HTTP/2 \u534f\u8bae\u4f20\u8f93\uff0c\u4f7f\u7528Protocol Buffers \u4f5c\u4e3a\u63a5\u53e3\u63cf\u8ff0\u8bed\u8a00\u3002\\n\\n\u5728 gRPC \u4e2d\uff0c\u5ba2\u6237\u673a\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u4e0d\u540c\u673a\u5668\u4e0a\u7684\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u4e0a\u7684\u65b9\u6cd5\uff0c\u5c31\u597d\u50cf\u5b83\u662f\u4e00\u4e2a\u672c\u5730\u5bf9\u8c61\u4e00\u6837\uff0c\u8fd9\u4f7f\u5f97\u60a8\u66f4\u5bb9\u6613\u521b\u5efa\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u548c\u670d\u52a1\u3002\u4e0e\u8bb8\u591a RPC \u7cfb\u7edf\u4e00\u6837\uff0cgRPC \u57fa\u4e8e\u5b9a\u4e49\u670d\u52a1\u7684\u601d\u60f3\uff0c\u6307\u5b9a\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u8fdc\u7a0b\u8c03\u7528\u7684\u65b9\u6cd5\u3002\u5728\u670d\u52a1\u5668\u7aef\uff0c\u670d\u52a1\u5668\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\u5e76\u8fd0\u884c\u4e00\u4e2a gRPC \u670d\u52a1\u5668\u6765\u5904\u7406\u5ba2\u6237\u673a\u8c03\u7528\u3002\u5728\u5ba2\u6237\u7aef\uff0c\u5ba2\u6237\u7aef\u6709\u4e00\u4e2a\u5b58\u6839(\u5728\u67d0\u4e9b\u8bed\u8a00\u4e2d\u79f0\u4e3a\u5ba2\u6237\u7aef) \uff0c\u5b83\u63d0\u4f9b\u4e0e\u670d\u52a1\u5668\u76f8\u540c\u7684\u65b9\u6cd5\u3002\\n\\n![grpc](https://grpc.io/img/landing-2.svg)\\n\\n## grpc \u4f7f\u7528\u793a\u4f8b\\n### 1\u3001\u7f16\u5199proto\\n```protobuf\\nsyntax = \\"proto3\\";\\n\\n//x:generate protoc --go_out=%DIR% --go-grpc_out=%DIR% %BASE%\\n\\npackage greet;\\n\\nservice Greeter {\\n  // Sends a greeting\\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\\n}\\n\\n// The request message containing the user\'s name.\\nmessage HelloRequest {\\n  string name = 1;\\n}\\n\\n// The response message containing the greetings\\nmessage HelloReply {\\n  string message = 1;\\n}\\n```\\n\\n> \u6e29\u99a8\u63d0\u793a\\n>\\n> ```text\\n> //x:generate protoc --go_out=%DIR% --go-grpc_out=%DIR% %BASE%\\n> ```\\n> \u8fd9\u6bb5\u6ce8\u91ca\u5728\u5b89\u88c5intellij\u63d2\u4ef6(CommentShell)\u540e\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u5e76\u751f\u6210pb.go\uff0c\u524d\u63d0\u662f\u5df2\u7ecf\u5b89\u88c5\u4e86\\n> `protoc` \u548c `protoc-gen-go-grpc`\\n\\n### 2\u3001\u70b9\u51fb\u505a\u4fa7\u8fb9\u680f\u8fd0\u884c\u6309\u94ae\u751f\u6210pb.go\\n![](https://oscimg.oschina.net/oscnet/up-908ef1de9bc427a2e4de6d2fec0cc5853ad.png)\\n\\n### 3\u3001server\u7aef\u4ee3\u7801\\n```go\\ntype serverImplemented struct {\\n\\tgreet.UnimplementedGreeterServer\\n}\\n\\nfunc (s *serverImplemented) SayHello(context.Context, *greet.Req) (*greet.Reply, error) {\\n\\treturn &greet.Reply{}, nil\\n}\\n\\nfunc main() {\\n\\ts := grpc.NewServer()\\n\\tgreet.RegisterGreeterServer(s, &serverImplemented{})\\n\\tlis, err := net.Listen(\\"tcp\\", \\"127.0.0.1:8888\\")\\n\\tif err != nil {\\n\\t\\tlog.Fatal(err)\\n\\t}\\n\\terr = s.Serve(lis)\\n\\tif err != nil {\\n\\t\\tlog.Fatal(err)\\n\\t}\\n}\\n```\\n\\n### 4\u3001client\u7aef\u4ee3\u7801\\n\\n```go\\nconn, err := grpc.Dial(\\"\\", grpc.WithInsecure(), grpc.WithBlock())\\nif err != nil {\\n    log.Fatal(err)\\n}\\n\\nclient := greet.NewGreeterClient(conn)\\n// \u5ffd\u7565resp\\nclient.SayHello(context.Background(), &greet.Req{})\\n```\\n\\n## \u6e90\u7801\u5206\u6790\\n\\n### grpc\u7248\u672c\\nv.1.36.0\\n\\n### \u5927\u7eb2\\n![](https://oscimg.oschina.net/oscnet/up-a19d6dbcb677eb60d4e8d26e9e589f9c738.png)\\n\\n### client\\n\u6211\u4eec\u4ece\u4e0a\u9762\u7684demo\u7684client\u7aef\u4f5c\u4e3a\u5165\u53e3\u6765\u8fdb\u5165\u6e90\u7801\uff0c\u4ececlient\u4f7f\u7528\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\uff0c\\n\u8be5\u7a0b\u5e8f\u6709\u4e24\u4e2a\u6b65\u9aa4\uff1a\\n* Dial\\n* SayHello\uff08Invoke\uff09\\n\\n#### grpc.Dial(clientconn.go:135)\\n\\nDial\u6700\u7ec8\u4f1a\u8c03\u7528 `grpc.DialContext` \u65b9\u6cd5\uff0c\u8fd9\u91cc\u9762\u6211\u4e2a\u4eba\u5728\u9605\u8bfb\u7684\u65f6\u5019\u4e3b\u8981\u5173\u6ce8\u4e86\u4e00\u4e0b\u51e0\u70b9\uff1a\\n\\n* \u4e2d\u95f4\u4ef6\u94fe\u5f0f\u8c03\u7528\\n\\n  \u4e00\u6b21\u6267\u884c\u4e2d\u95f4\u4ef6\u4e2d\u7684\u903b\u8f91\uff0c\u5f62\u6210\u94fe\u5f0f\u8c03\u7528\u62fc\u88c5\\n    ```go\\n    chainUnaryClientInterceptors(cc)\\n    chainStreamClientInterceptors(cc)\\n    ```\\n\\n* insecure\u5904\u7406\\n\\n  \u5b89\u88c5\u4f20\u8f93\u53c2\u6570\u6821\u9a8c\uff0c\u5176\u53ef\u4ee5\u7531 `grpc.WithInsecure()` \u6765\u63a7\u5236\u662f\u5426\u5f00\u542f\u5b89\u5168\u4f20\u8f93\uff0c\u5982\u679c\u5f00\u542f\uff0c\\n  \u5219\u4f1a\u5bf9https\u8bc1\u4e66\uff0c\u5bc6\u94a5\u5728\u8fd9\u4e00\u6b65\u505a\u53c2\u6570\u6821\u9a8c\u3002\\n\\n    ```go\\n    if !cc.dopts.insecure {\\n        if cc.dopts.copts.TransportCredentials == nil && cc.dopts.copts.CredsBundle == nil {\\n            return nil, errNoTransportSecurity\\n        }\\n        if cc.dopts.copts.TransportCredentials != nil && cc.dopts.copts.CredsBundle != nil {\\n            return nil, errTransportCredsAndBundle\\n        }\\n    } else {\\n        if cc.dopts.copts.TransportCredentials != nil || cc.dopts.copts.CredsBundle != nil {\\n            return nil, errCredentialsConflict\\n        }\\n        for _, cd := range cc.dopts.copts.PerRPCCredentials {\\n            if cd.RequireTransportSecurity() {\\n                return nil, errTransportCredentialsMissing\\n            }\\n        }\\n    }\\n    ```\\n* defaultServiceConfigRawJSON \u89e3\u6790\\n\\n  \u901a\u8fc7json\u6587\u672c\u5f62\u5f0f\u8bbe\u7f6eServiceConfig\uff0c\u76f8\u5173\u53c2\u6570\u89c1\\n    ```go\\n    type jsonSC struct {\\n        // \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\\n        LoadBalancingPolicy *string\\n        // \u8d1f\u8f7d\u5747\u8861\u914d\u7f6e\\n        LoadBalancingConfig *internalserviceconfig.BalancerConfig\\n        // \u6bcf\u4e2arpc\u65b9\u6cd5\u7684\u914d\u7f6e\\n        MethodConfig        *[]jsonMC\\n        // \u91cd\u8bd5\u673a\u5236\u76f8\u5173\u914d\u7f6e\\n        RetryThrottling     *retryThrottlingPolicy\\n        // \u5065\u5eb7\u68c0\u6d4b\u914d\u7f6e\\n        HealthCheckConfig   *healthCheckConfig\\n    }\\n    ```\\n* \u8d85\u65f6\u63a7\u5236\\n\\n  \u5ba2\u6237\u7aef\u8d85\u65f6\u63a7\u5236\u662f\u901a\u8fc7 `Context.WithTimeout` \u8fdb\u884c\u63a7\u5236\u7684\uff0c\u5176\u8d85\u65f6\u65f6\u957f\u53ef\u4ee5\u901a\u8fc7\\n  `grpc.WithTimeout(time.Duration)` \u63a7\u5236\u3002\\n\\n    ```go\\n    if cc.dopts.timeout > 0 {\\n            var cancel context.CancelFunc\\n            ctx, cancel = context.WithTimeout(ctx, cc.dopts.timeout)\\n            defer cancel()\\n        }\\n    ```\\n* getResolver\\n\\n  `getResolver`\u4f18\u5148\u4eceDialOption\u4e2d\u8bfb\u53d6\uff0c\u5176\u6b21\u4e2d\u5168\u5c40\u8bfb\u53d6\uff0cDialOption\u53ef\u4ee5\u901a\u8fc7 `grpc.WithResolvers()` \u8bbe\u7f6e\uff0c\\n  \u5168\u5c40\u7684\u53ef\u4ee5\u901a\u8fc7 `resolver.Register(Builder)` \u6ce8\u518c,\u7528\u6cd5\u53ef\u53c2\u8003 `resolver/dns/dns_resolver.go`\u3002\\n\\n    ```go\\n    func (cc *ClientConn) getResolver(scheme string) resolver.Builder {\\n        for _, rb := range cc.dopts.resolvers {\\n            if scheme == rb.Scheme() {\\n                return rb\\n            }\\n        }\\n        return resolver.Get(scheme)\\n    }\\n    ```\\n*  block\u63a7\u5236\\n\\n\u5728 `DialContext` \u6587\u6863\u6ce8\u91ca\u4e2d\u5df2\u7ecf\u8bf4\u660e\uff0cblock\u4f1a\u963b\u585edial\u8fc7\u7a0b\uff0c\u77e5\u9053\u8fde\u63a5\u72b6\u6001\u53d8\u4e3a `Ready` \u6216\u8005\u9047\u5230\u9519\u8bef\uff0c\u9ed8\u8ba4\u662f\u975e\u963b\u585e\u7684\uff08\u5373\u5728\u540e\u53f0\u5efa\u7acb\u8fde\u63a5\u64cd\u4f5c\uff09\u3002\\n\u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7 `grpc.WithBlock()` \u6765\u63a7\u5236\u963b\u585e\u3002\\n\\n#### SayHello\\n\\n\u901a\u8fc7\u8c03\u7528 `SayHello`\u65b9\u6cd5\u8ffd\u6eaf\uff0c\u5728pb.go\u6587\u4ef6\u4e2d\u53ef\u4ee5\u770b\u5230\u5176\u8c03\u7528\u4e86 `Invoke` \u65b9\u6cd5\uff1a\\n  ```go\\n  func (c *greeterClient) SayHello(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Reply, error) {\\n      out := new(Reply)\\n      err := c.cc.Invoke(ctx, \\"/greet.Greeter/SayHello\\", in, out, opts...)\\n      if err != nil {\\n          return nil, err\\n      }\\n      return out, nil\\n  }\\n  ```\\n\\n\u6df1\u5165\u5230 `Invoke` \u65b9\u6cd5\u4e2d\uff0c\u627e\u5230 `ClientConn.Invoke()` \u5176\u5b9e\u73b0\u4e86 `ClientConnInterface`\uff0c\u627e\u5230 `call.go` \u7b2c 29 \u884c\uff0c\u5728\u8be5\u65b9\u6cd5\u4e2d\u505a\u4e86\u4e24\u4ef6\u4e8b\uff1a\\n```go\\nopts = combine(cc.dopts.callOptions, opts)\\n\\n\\tif cc.dopts.unaryInt != nil {\\n\\t\\treturn cc.dopts.unaryInt(ctx, method, args, reply, cc, invoke, opts...)\\n\\t}\\n\\treturn invoke(ctx, method, args, reply, cc, opts...)\\n```\\n* combine \u7ec4\u88c5CallOption\\n* invoke \u771f\u6b63\u6267\u884cclient\u8c03\u7528\\n\\n\\n##### invoke(call.go:65)\\n\\n\u5728\u8be5\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u7ec8\u4e8e\u770b\u5230\u4e86\u6838\u5fc3\u7684\u903b\u8f91:\\n* newClientStream(stream.go:160)\\n\\n  \u5728\u8be5\u65b9\u6cd5\u4e2d\u4e3b\u8981\u662f\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5176\u4e2d\u53ef\u4ee5\u91cd\u70b9\u5173\u6ce8\u4e00\u4e0b `Compressor` \u548c `Encode` \u521d\u59cb\u5316\u3002\\n\\n  **Compressor(stream.go:233)\uff1a**\\n  ```go\\n  if ct := c.compressorType; ct != \\"\\" {\\n          callHdr.SendCompress = ct\\n          if ct != encoding.Identity {\\n              comp = encoding.GetCompressor(ct)\\n              if comp == nil {\\n                  return nil, status.Errorf(codes.Internal, \\"grpc: Compressor is not installed for requested grpc-encoding %q\\", ct)\\n              }\\n          }\\n      } else if cc.dopts.cp != nil {\\n          callHdr.SendCompress = cc.dopts.cp.Type()\\n          cp = cc.dopts.cp\\n      }\\n  ```\\n  `Compressor`\u4f1a\u4f18\u5148\u4ece `CallOption` \u4e2d\u53bb\u8bfb\u53d6 `Compressor` \u7684\u540d\u79f0\uff0c\u7136\u540e\u4ece\u5168\u5c40\u4e2d\u53bb\u67e5\u627e\uff08\u524d\u63d0\u5df2\u6ce8\u518c\uff09\uff0c\\n  \u5176\u6b21\u4ece `DialOption`\u4e2d\u53bb\u8bfb\u53d6\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7 `grpc.WithCompressor()` \u6267\u884c\u3002\\n  > \u81ea\u5b9a\u4e49 `Compressor` \u53ef\u53c2\u8003 `gzip.go`,\u8fd9\u4e5f\u662f\u9ed8\u8ba4\u7684\u538b\u7f29\u65b9\u5f0f\\n\\n  **Encoding(rpc_util.go:854)\uff1a**\\n  ```go\\n  if c.codec != nil {\\n          // codec was already set by a CallOption; use it.\\n          return nil\\n      }\\n  \\n      if c.contentSubtype == \\"\\" {\\n          // No codec specified in CallOptions; use proto by default.\\n          c.codec = encoding.GetCodec(proto.Name)\\n          return nil\\n      }\\n  \\n      // c.contentSubtype is already lowercased in CallContentSubtype\\n      c.codec = encoding.GetCodec(c.contentSubtype)\\n      if c.codec == nil {\\n          return status.Errorf(codes.Internal, \\"no codec registered for content-subtype %s\\", c.contentSubtype)\\n      }\\n      return nil\\n  ```\\n  `Encode \u4f1a\u4f18\u5148\u4ece `CallOption` \u4e2d\u8bfb\u53d6\uff0c\u7136\u540e\u4ece\u5168\u5c40\u4e2d\u67e5\u627e\uff0c\u5982\u679c\u6ca1\u6709\u5219\u4f7f\u7528\u9ed8\u8ba4\u7684encoding\u65b9\u5f0f\u2014\u2014 `proto`,\u8fd9\u4e2a\u4e5f\u662f\u9ed8\u8ba4\u7684encoding\u65b9\u5f0f\u3002\\n  > \u81ea\u5b9a\u4e49 `Encoding` \u53ef\u53c2\u8003 `proto.go`\\n\\n* ClientStream.SendMsg(stream.go:1193)\\n  `SendMsg` \u91cc\u9762\u6709\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u65b9\u6cd5 `prepareMsg`\uff0c\u5176\u5c06\u8bf7\u6c42\u4f53\u8fdb\u884cencoding\u548ccompress\u7136\u540e\u5f97\u5230\\n  `hdr`\u3001`payload`\uff0c`hdr`\u4e2d\u67095\u4e2abyte\u7684\u5185\u5bb9\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2abyte\u5b58\u50a8\u7684\u662f\u662f\u5426compress\u7684\u6807\u5fd7\u4f4d\uff0c1\uff1a\u538b\u7f29\uff0c\\n  0\uff1a\u672a\u538b\u7f29\u3002\u5269\u4f594\u4e2abyte\u5b58\u50a8\u7684\u662fpayload\u7684\u957f\u5ea6\u3002\\n  \u5728 `prepareMsg` \u5b8c\u6210\u540e\u5c31\u8fdb\u5165\u6570\u636e\u4f20\u8f93\u4e86 `transport.ClientTransport.Write`\uff0c\u8fd9\u91cc\u5c31\u4e0d\u7ee7\u7eed\u6df1\u7a76\u4e0b\u53bb\u4e86\u3002\\n\\n* ClientStream.RecvMsg(stream.go:1238)\\n\\n  \u5728 `RecvMsg` \u65b9\u6cd5\u4e2d\u5176\u9996\u5148\u901a\u8fc7 `transport.Stream.RecvCompress` \u8bfb\u53d6 `hdr`,\u5224\u65ad\u662f\u5426\u9700\u8981 `UnCompress` \u548c `Decoding`\uff0c\u7136\u540e\\n  \u901a\u8fc7 `recv` \u8bfb\u53d6\u54cd\u5e94\u7684\u5185\u5bb9\u3002\\n\\n  ```go\\n  if !as.decompSet {\\n          // Block until we receive headers containing received message encoding.\\n          if ct := as.s.RecvCompress(); ct != \\"\\" && ct != encoding.Identity {\\n              if as.dc == nil || as.dc.Type() != ct {\\n                  // No configured decompressor, or it does not match the incoming\\n                  // message encoding; attempt to find a registered compressor that does.\\n                  as.dc = nil\\n                  as.decomp = encoding.GetCompressor(ct)\\n              }\\n          } else {\\n              // No compression is used; disable our decompressor.\\n              as.dc = nil\\n          }\\n          // Only initialize this state once per stream.\\n          as.decompSet = true\\n      }\\n      err = recv(as.p, as.codec, as.s, as.dc, m, *as.callInfo.maxReceiveMessageSize, nil, as.decomp)\\n      if err != nil {\\n          if err == io.EOF {\\n              if statusErr := as.s.Status().Err(); statusErr != nil {\\n                  return statusErr\\n              }\\n              return io.EOF // indicates successful end of stream.\\n          }\\n          return toRPCErr(err)\\n      }\\n  \\n  ```\\n\\n## server\\n\u4ece\u4e0a\u8ff0demo\u4e2d\u53ef\u4e3a\u7ebf\u7d22\uff0c`server`\u7aef\u6211\u4eec\u5173\u6ce8\u4e09\u4e2a\u9636\u6bb5\\n* grpc.NewServer\\n* RegisterService\\n* Serve\\n\\n### grpc.NewServer(server.go:514)\\n\u8be5\u65b9\u6cd5\u4e2d\u505a\u7684\u4e8b\u60c5\uff0c\u6211\u8ba4\u4e3a\u6bd4 `client` \u7b80\u5355\u5f88\u591a\uff0c\u4e3b\u8981\u662f\u4e00\u4e9b\u521d\u59cb\u5316\u5de5\u4f5c\uff0c\u4e2d\u95f4\u4ef6\u7684\u94fe\u5f0f\u8c03\u7528\u62fc\u88c5\u4e5f\u5728\u8fd9\u91cc\u5b8c\u6210\u4e86\uff1a\\n```go\\nchainUnaryServerInterceptors(s)\\nchainStreamServerInterceptors(s)\\n```\\n\\n### RegisterService(server.go:578)\\n\u5176\u4f1a\u5728\u505a\u7b80\u5355\u7684 `interface` \u5b9e\u73b0\u68c0\u9a8c\u540e\u8c03\u7528 `register(server.go:589)` \u65b9\u6cd5\u3002\\n```go\\ns.mu.Lock()\\ndefer s.mu.Unlock()\\ns.printf(\\"RegisterService(%q)\\", sd.ServiceName)\\nif s.serve {\\n    logger.Fatalf(\\"grpc: Server.RegisterService after Server.Serve for %q\\", sd.ServiceName)\\n}\\nif _, ok := s.services[sd.ServiceName]; ok {\\n    logger.Fatalf(\\"grpc: Server.RegisterService found duplicate service registration for %q\\", sd.ServiceName)\\n}\\ninfo := &serviceInfo{\\n    serviceImpl: ss,\\n    methods:     make(map[string]*MethodDesc),\\n    streams:     make(map[string]*StreamDesc),\\n    mdata:       sd.Metadata,\\n}\\nfor i := range sd.Methods {\\n    d := &sd.Methods[i]\\n    info.methods[d.MethodName] = d\\n}\\nfor i := range sd.Streams {\\n    d := &sd.Streams[i]\\n    info.streams[d.StreamName] = d\\n}\\ns.services[sd.ServiceName] = info\\n```\\n\\n\u672c\u9636\u6bb5\u5c06\u6bcf\u4e2arpc\u65b9\u6cd5\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4ee5\u4fbf\u540e\u7eed\u4f7f\u7528\u3002\\n\\n### Serve(server.go:699)\\n\u63a5\u6536\u6765\u81ea `client` \u7aef\u7684\u8bf7\u6c42\uff0c\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 `goroutine` \u8bfb\u53d6\u8bf7\u6c42\u6570\u636e\u5e76\u5904\u7406\u540e\u54cd\u5e94\u3002\\n```go\\nfor {\\n    rawConn, err := lis.Accept()\\n    if err != nil {\\n        if ne, ok := err.(interface {\\n            Temporary() bool\\n        }); ok && ne.Temporary() {\\n            if tempDelay == 0 {\\n                tempDelay = 5 * time.Millisecond\\n            } else {\\n                tempDelay *= 2\\n            }\\n            if max := 1 * time.Second; tempDelay > max {\\n                tempDelay = max\\n            }\\n            s.mu.Lock()\\n            s.printf(\\"Accept error: %v; retrying in %v\\", err, tempDelay)\\n            s.mu.Unlock()\\n            timer := time.NewTimer(tempDelay)\\n            select {\\n            case <-timer.C:\\n            case <-s.quit.Done():\\n                timer.Stop()\\n                return nil\\n            }\\n            continue\\n        }\\n        s.mu.Lock()\\n        s.printf(\\"done serving; Accept = %v\\", err)\\n        s.mu.Unlock()\\n\\n        if s.quit.HasFired() {\\n            return nil\\n        }\\n        return err\\n    }\\n    tempDelay = 0\\n    // Start a new goroutine to deal with rawConn so we don\'t stall this Accept\\n    // loop goroutine.\\n    //\\n    // Make sure we account for the goroutine so GracefulStop doesn\'t nil out\\n    // s.conns before this conn can be added.\\n    s.serveWG.Add(1)\\n    go func() {\\n        s.handleRawConn(rawConn)\\n        s.serveWG.Done()\\n    }()\\n}\\n```\\n\\n\u6838\u5fc3\u5904\u7406\u903b\u8f91\uff0c\u6211\u4eec\u8fdb\u5165 `s.handleRawConn(rawConn)` \u65b9\u6cd5\u67e5\u770b\u4e00\u4e0b\uff0c\u5728\u8be5\u65b9\u6cd5\u4e2d\u5b9e\u73b0\u4e86\u5efa\u7acb\u8fde\u63a5\u548c\u5904\u7406 `stream`\u3002\\n```go\\nconn, authInfo, err := s.useTransportAuthenticator(rawConn)\\n...\\ngo func() {\\n    s.serveStreams(st)\\n    s.removeConn(st)\\n}()\\n```\\n\\nserveStreams(server.go:857)\\n```go\\n...\\ns.handleStream(st, stream, s.traceInfo(st, stream))\\n...\\n```\\n\\nhandleStream(server.go:1510)\\n\u8fd9\u91cc\u4fbf\u4f7f\u7528\u5230\u4e86 `RegisterService` \u6b65\u9aa4\u4e2d\u7684\u90e8\u5206\u4fe1\u606f\uff0c\u6821\u9a8crpc\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u5219\u7ee7\u7eed\u5904\u7406\uff0c\u8fd9\u91cc\u6709\u4e00\u5143\\nrpc\u6570\u636e\u5904\u7406\u548c\u6d41\u5f0f\u6570\u636e\u5904\u7406\uff0c\u6211\u4eec\u8fdb\u5165\u4e00\u5143rpc\u7684\u6570\u636e\u5904\u7406 `processUnaryRPC`\\n```go\\nsrv, knownService := s.services[service]\\nif knownService {\\n    if md, ok := srv.methods[method]; ok {\\n        s.processUnaryRPC(t, stream, srv, md, trInfo)\\n        return\\n    }\\n    if sd, ok := srv.streams[method]; ok {\\n        s.processStreamingRPC(t, stream, srv, sd, trInfo)\\n        return\\n    }\\n}\\n```\\n\\nprocessUnaryRPC(server.go:1062)\\n\u8fd9\u91cc\u624d\u662f\u771f\u6b63\u8bfb\u53d6\u8bf7\u6c42\u548c\u54cd\u5e94\u8bf7\u6c42\u7684\u5730\u65b9\uff0c\u5176\u5904\u7406\u903b\u8f91\u5927\u81f4\u4e3a\\n* \u83b7\u53d6Compressor\uff0c\u89e3\u538b\u8bfb\u53d6\u5230\u7684payload\u6570\u636e\\n    * 1\u3001\u4f18\u5148\u4ecehdr\u4e2d\u83b7\u53d6\uff0c\u5982\u679c\u6ca1\u6709\u5219\u6267\u884c\u7b2c2\u6b65\\n    * 2\u3001\u4eceServerOption\u83b7\u53d6\u662f\u5426\u8bbe\u7f6eCompressor\\n* \u8bfb\u53d6\u6570\u636e\u3001UnCompress\u3001Decode\\n* sendResponse\u54cd\u5e94\u6570\u636e\\n\\n\\n## \u5b66\u4e60\u5fc3\u5f97\\n* \u63d2\u4ef6\u5f0f\u7f16\u7a0b\\n    * encoding\u7684\u6ce8\u518c\u4e0e\u83b7\u53d6\\n    * compressor\u7684\u6ce8\u518c\u4e0e\u83b7\u53d6\\n    * resolver\u7684\u6ce8\u518c\u4e0e\u83b7\u53d6\\n* \u521d\u6b65\u4e86\u89e3\u4e00\u5143rpc\u7684\u8c03\u7528\u6d41\u7a0b\\n\\n# \u603b\u7ed3\\n\u672c\u6b21\u5b66\u4e60\u975e\u5e38\u7c97\u6d45\uff0c\u5728\u6d88\u5316\u540e\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u9605\u8bfb\u6bcf\u4e2a\u9636\u6bb5\u7684\u7ec6\u8282\u4ee5\u52a0\u6df1\u5bf9grpc\u5904\u7406\u6d41\u7a0b\u7684\u7406\u89e3\u548c\u758f\u5bfc\u3002"},{"id":"/go/golang-module","metadata":{"permalink":"/go/golang-module","source":"@site/blog/go/golang-module.md","title":"\u4e3a\u4ec0\u4e48\u770b\u4e86 N \u6b21 go module, \u5c31\u662f\u8bb0\u4e0d\u4f4f\uff1f","description":"cover","date":"2021-03-05T00:00:00.000Z","formattedDate":"2021\u5e743\u67085\u65e5","tags":[{"label":"go","permalink":"/tags/go"},{"label":"module","permalink":"/tags/module"}],"readingTime":17.126666666666665,"truncated":true,"authors":[{"name":"Keson","title":"\u5b57\u8282\u8df3\u52a8\u5f00\u53d1\u5de5\u7a0b\u5e08 /  goctl \u7ef4\u62a4\u4eba","url":"https://github.com/anqiansong","imageURL":"/img/logo.webp","key":"keson"}],"frontMatter":{"title":"\u4e3a\u4ec0\u4e48\u770b\u4e86 N \u6b21 go module, \u5c31\u662f\u8bb0\u4e0d\u4f4f\uff1f","date":"2021-03-05T00:00:00.000Z","authors":"keson","tags":["go","module"]},"prevItem":{"title":"grpc\u6e90\u7801\u5b66\u4e60\u7b14\u8bb0(\u7c97\u6d45\u7248)","permalink":"/go/grpc"},"nextItem":{"title":"\u5de7\u5999\u4f7f\u7528channel\u5b9e\u73b0\u9650\u6d41\u5668","permalink":"/go/channel-limiter"}},"content":"![cover](../resource/202103/go-module.png)\\n\\n\\n# go module\\n\\n\u5728go1.16\u7248\u672c\u53d1\u5e03\u540e\uff0cgo module\u7531\u539f\u6765\u7684\u9ed8\u8ba4\u503c `auto` \u53d8\u4e3a `on` \u4e86\uff0c\u8fd9\u610f\u5473\u7740\u540e\u7eed\u5f00\u53d1\u4e2d\uff0cgo\u66f4\u63a8\u8350\u7528go module \u6a21\u5f0f\u5f00\u53d1\uff0c\u800c\u4e0d\u662fgopath\u6a21\u5f0f\u5f00\u53d1\u4e86\u3002\\n\\n\u5728\u4e4b\u524d\uff0c\u6211\u4e5f\u662f\u5927\u591a\u6570\u4ee5go module\u6a21\u5f0f\u8fdb\u884cgolang\u5f00\u53d1\uff0c\u4f46\u81f3\u4eca\u5bf9\u5176\u4e0d\u719f\u6089\uff0c\u4ec5\u4ec5\u505c\u7559\u5728\uff1a`\u522b\u4eba\u662f\u8fd9\u6837\u505a\u7684\uff0c\u6211\u8ddf\u7740\u505a\u5c31\u662f\u4e86` \uff0c\u8fd9\u90fd\u7b97\u4e0d\u4e0a\u4f1a\u4f7f\u7528go module\uff0c \u66f4\u4e0d\u5fc5\u8bf4\u719f\u6089\u6216\u8005\u7cbe\u901a\u4e86\uff1b\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4f1a\u5b58\u5728\u8fd9\u4e9b\u7591\u95ee\uff1a\\n\\n\x3c!-- truncate --\x3e\\n\\n* go mod\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u5404\u9879\u5185\u5bb9\u4ee3\u8868\u4ec0\u4e48\uff1b\\n* \u9664\u4e86\u5e38\u89c1\u7684 `require` \u3001\u5076\u5c14\u89c1 `replace` \u5173\u952e\u5b57\u5916\uff0c`exclude` \u3001`retract` \uff081.16\uff09\u8fd9\u4e9b\u5173\u952e\u5b57\u662f\u4ec0\u4e48\uff0c\u600e\u4e48\u7528\uff1b\\n* go mod\u6587\u4ef6\u8bed\u6cd5\u683c\u5f0f\u662f\u4ec0\u4e48\uff0c\u76ee\u524d\u9664\u4e86\u8ddf\u7740\u522b\u4eba\u5199\uff0c\u597d\u50cf\u4e5f\u4e0d\u660e\u767d\u5176\u4e2d\u7684\u8bed\u6cd5\\n* `github.com/tal-tech/go-zero v1.1.5` \u3001`github.com/antlr/antlr4 v0.0.0-20210105212045-464bcbc32de2`\\n  \u3001`google.golang.org/protobuf v1.25.0 // indirect` \u7b49\u683c\u5f0f\u5206\u522b\u4ee3\u8868\u4ec0\u4e48\uff0c\u4e3a\u4ec0\u4e48\u6709\u7684\u8fd8\u6709\\n  `// indirect` \u4fee\u9970\uff1b\\n* go.mod\u4e0b\u9762\u4e3a\u4ec0\u4e48\u6709\u4e00\u4e2ago.sum\uff0c\u5176\u6709\u4ec0\u4e48\u4f5c\u7528\uff1b\\n* ...\\n\\n\u4e0d\u77e5\u9053\u6709\u591a\u5c11\u4eba\u548c\u6211\u4e00\u6837\uff0c\u5bf9go module\u7684\u4e86\u89e3\u5fae\u4e0d\u8db3\u9053\u3002\\n\\n\u6700\u8fd1\uff0c\u5e26\u7740\u8fd9\u4e9b\u7591\u60d1\uff0c\u53bb\u5b66\u4e60\u4e86\u5b98\u65b9\u7684\u53c2\u8003\u624b\u518c\uff0c\u8fd9\u4e9b\u7591\u60d1\u5c31\u5f15\u5203\u800c\u89e3\u4e86\u3002\\n\\n## project\\n\\n\u5728\u6b63\u5f0f\u8fdb\u5165module\u4ecb\u7ecd\u524d\uff0c\u6709\u5fc5\u8981\u9996\u5148\u4e86\u89e3\u4e00\u4e0bproject\u548cmodule\u7684\u5173\u7cfb\uff0c\u76f8\u4fe1\u5f00\u53d1\u8fc7Android\u6216\u8005Java\u7684\u540c\u5b66\u5bf9module\u6709\u975e\u5e38\u597d\u7684\u7406\u89e3\uff0c\u901a\u4fd7\u7684\u8bb2\uff0c\u4e00\u4e2aproject\u53ef\u4ee5\u6709\u591a\u4e2amodule\u7ec4\u6210\uff0cmodule\u53ef\u4ee5\u4f5c\u4e3a\u72ec\u7acb\\n\u7684project\u88ab\u522b\u7684project\u4f5c\u4e3a\u4f9d\u8d56\u5f15\u7528\uff0c\u5982\u4e0bgolang\u5de5\u7a0b `demo` \u4e2d\u5c31\u5305\u542b\u4e86 `foo` \u548c `bar` \u4e24\u4e2amodule\\n\\n```text\\ndemo\\n\u251c\u2500\u2500 bar\\n\u2502   \u2514\u2500\u2500 go.mod\\n\u2514\u2500\u2500 foo\\n    \u2514\u2500\u2500 go.mod\\n```\\n\\n## module\u4ecb\u7ecd\\n\\ngo module(\u4ee5\u4e0b\u79f0\uff1amodule\u3001\u6a21\u5757\u3001\u5de5\u7a0b\u6a21\u5757)\\n\u662fgolang\u4e2d\u5df2\u53d1\u5e03\u7248\u672c\u7684package\u7684\u96c6\u5408\uff0c\u662fGo\u7ba1\u7406\u4f9d\u8d56\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u7c7b\u4f3cAndroid\u4e2d\u7684Gradle\uff0cJava\u4e2d\u7684Maven\uff0c\u5f53\u7136\uff0c\u4ed6\u4eec\u7684\u7ba1\u7406\u5f62\u5f0f\u80af\u5b9a\u662f\u5927\u76f8\u5f84\u5ead\uff0c\u4f46\u662f\u76ee\u7684\u90fd\u662f\u4e00\u81f4\u7684\uff0c\u5bf9\u4f9d\u8d56\u8fdb\u884c\u7ba1\u7406\u3002\\n\\n\u5728go.mod\u4e2d\uff0c\u5176\u5305\u542b\u4e86main module\u7684module\u8def\u5f84\u3001module\u4f9d\u8d56\u53ca\u5176\u5173\u8054\u4fe1\u606f\uff08\u7248\u672c\u7b49\uff09\uff0c\u5982\u679c\u4e00\u4e2a\u5de5\u7a0b\u6a21\u5757\u9700\u8981\u4ee5\\n`go module mode`\uff08module\u6a21\u5f0f\uff09\u5f00\u53d1\uff0c\u5728\u5de5\u7a0b\u6a21\u5757\u7684\u6839\u76ee\u5f55\u4e0b\u5fc5\u987b\u5305\u542b `go.mod` \u6587\u4ef6\u3002\\n\\n## module path(module\u8def\u5f84)\\n\\nmodule\u8def\u5f84\u662f\u4e00\u4e2a\u5de5\u7a0b\u6a21\u5757\u4e2d\u7684\u540d\u79f0\uff0c\u5728go.mod\u4e2d\u4ee5 `module` \u547d\u4ee4\u58f0\u660e\uff0c\u5176\u4e5f\u662f\u5de5\u7a0b\u6a21\u5757\u4e2dpackage import\u7684\u524d\u7f00\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b `demo/foo` \u4e0b\u7684module\u8def\u5f84\uff1a\\n\\n```shell\\n$ cat demo/foo/go.mod\\n```\\n\\n```text\\nmodule github.com/foo\\n\\ngo 1.16\\n\\nrequire github.com/tal-tech/go-zero\\n```\\n\\n`github.com/foo` \u4e3amain module `foo` \u6a21\u5757\u7684\u6a21\u5757\u8def\u5f84\uff0c`github.com/tal-tech/go-zero` \u4e5f\u662fmodule path, \u4ed6\u4eec\u4e5f\u662ffoo\u4e2dpackage\\nimport\u7684\u524d\u7f00\uff0c\u6211\u5728foo\u4e0b\u7684base\u5305\u4e0b\u6dfb\u52a0\u4e86\u4e00\u4e2a `Echo` \u51fd\u6570\uff0c\u7136\u540e\u5728 `main.go` \u4e2d\u8c03\u7528\uff0c\u6211\u4eec\u89c2\u5bdf\u4e00\u4e0b\u5176package import\u7684\u524d\u7f00\\n\\n\u76ee\u5f55\u6811\\n\\n```text\\nfoo\\n\u251c\u2500\u2500 base\\n\u2502   \u2514\u2500\u2500 base.go\\n\u251c\u2500\u2500 go.mod\\n\u2514\u2500\u2500 main.go\\n```\\n\\nmain.go\\n\\n```golang\\npackage main\\n\\nimport \\"github.com/foo/base\\" // github.com/foo \u4e3a module path\\nimport \\"fmt\\"\\n\\nfunc main() {\\n\\tmsg := base.Echo(\\"go-zero\\")\\n\\tfmt.Println(msg)\\n}\\n```\\n\\nmodule\u8def\u5f84\u4e3b\u8981\u4f5c\u7528\u662f\u63cf\u8ff0\u4e00\u4e2a\u5de5\u7a0b\u6a21\u5757\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\uff0c\u5728\u54ea\u91cc\u53ef\u4ee5\u627e\u5230\uff0c\u56e0\u6b64\uff0cmodule path\u7684\u7ec4\u6210\u5143\u7d20\u5c31\u5305\u542b\u4e86\\n\\n* repo \u8def\u5f84\\n* repo \u6587\u4ef6\u5939\\n* \u7248\u672c\\n\\n\u5176\u8868\u73b0\u5f62\u5f0f\u5982: `{{.repo_url}}/{{.nameOfDir}}/{{.version}}`\uff0c \u793a\u4f8b\uff1a`github.com/tal-tech/go-zero/v2` \uff0c`github.com/tal-tech`\\n\u660e\u786e\u544a\u77e5\u4e86 `repo` \u7684\u8def\u5f84\uff0c`go-zero` \u5373\u4e3arepo\u7684\u6587\u4ef6\u5939\uff0c`v2` \u5373\u4e3a\u7248\u672c\u53f7 \u7248\u672c\u4e00\u822c `v1` \u4e00\u822c\u90fd\u9ed8\u8ba4\u4e0d\u5199\u4e86\uff0c\u53ea\u6709\u5927\u4e8e `v1` \u65f6\u5219\u9700\u8981\u7528\u6765\u533a\u5206\u3002\\n\\n## \u7248\u672c\u53f7\\n\\n\u8fd9\u91cc\u7684\u7248\u672c\u53f7\u662f\u6307go.mod\u6587\u4ef6\u4e2d\u4f9d\u8d56module\u7684\u7248\u672c\uff0c\u8fd9\u548c\u4e0a\u6587\u7684 `{{.version}}` \u4f1a\u6709\u5173\u8054\uff0c\u5982\u4e0b\u793a\u4f8b\u4e2d\u7684 `v1.1.5` \u5373\u4e3a\u672c\u6b21\u6240\u8bf4\u7684module\u4f9d\u8d56\u7248\u672c\u53f7\u3002\\n\\n```text\\nmodule github.com/foo\\n\\ngo 1.16\\n\\nrequire github.com/tal-tech/go-zero v1.1.5\\n```\\n\\n### \u7248\u672c\u53f7\u7ec4\u6210\u53ca\u89c4\u5219\\n\\n\u7248\u672c\u53f7\u7531 `major version`\uff08\u4e3b\u8981\u7248\u672c\uff09\u3001 `minor version`\uff08\u6b21\u8981\u7248\u672c\uff09\u3001 `patch version`\uff08\u4fee\u8ba2\u7248\u672c\uff09\u7ec4\u6210\uff1b\\n\\n* major version\uff1a\u6307module\u4e2d\u5185\u5bb9\u4f5c\u4e86\u5411\u540e\u4e0d\u517c\u5bb9\u7684\u66f4\u6539\u540e\uff0c\u5219\u7248\u672c\u4f1aupgrade\uff0c\u5728\u6b64\u7248\u672c\u53f7upgrade\u65f6\uff0c`minor version` \u548c `patch version` \u8981\u5f52\u96f6\uff1b\\n* minor version\uff1a\u6307\u5728\u65b0\u7684\u529f\u80fd\u53d1\u5e03(features)\u6216\u8005\u4f5c\u4e86\u5411\u540e\u517c\u5bb9\u7684\u5185\u5bb9\u53d8\u66f4\u540e\uff0c\u6b64\u7248\u672c\u53f7\u4f1aupgrade\uff0c\u5728\u6b64\u7248\u672c\u53f7upgrade\u65f6\uff0c`patch version` \u8981\u5f52\u96f6\uff1b\\n* patch version\uff1a\u6307\u6709bug\u4fee\u590d\u6216\u8005\u529f\u80fd\u4f18\u5316\u65f6\uff0c\u6b64\u7248\u672c\u53f7\u53ef\u4ee5\u8fdb\u884cupgrade\uff0c\u5728\u6709pre-release\u53d1\u5e03\u9700\u6c42\u65f6\u4e5f\u53ef\u4ee5\u53d8\u66f4\u6b64\u7248\u672c\u53f7\\n\\n\u793a\u4f8b\uff1a`v0.0.0`\u3001 `v1.2.3`\u3001 `v1.2.10-pre`\\n\\n> \u5982\u679c\u4e00\u4e2a\u7248\u672c\u7684 `major version` \u4e3a `0` \u6216\u8005 `patch-version` \u6709\u7248\u672c\u540e\u7f00\uff08\u5982:pre\uff09\uff0c\u5219\u8ba4\u4e3a\u8fd9\u4e2a\u7248\u672c\u662f\u4e0d\u7a33\u5b9a\u7684\uff0c\u5982`v0.2.0`\u3001 `v1.5.0-pre`\u3001 `v1.1.3-beta`\\n> \u66f4\u591a\u5173\u4e8eversion\u8bed\u4e49\u5b9a\u4e49\u53ef\u4ee5\u53c2\u8003[\u300aSemantic Versioning 2.0.0\u300b](https://semver.org/spec/v2.0.0.html)\\n\\n\\nGolang\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528\u4e00\u4e9b\u6807\u8bb0\u3001\u5206\u652f\u6765\u4ee3\u8868\u67d0\u4e00\u4e2a\u7248\u672c\uff0c\u5982\uff1a`github.com/tal-tech/go-zero 39540e21d249e91f89d96d015a6e3795cfb2be44`\\n\u3001 `github.com/tal-tech/go-zero v1.1.6-0.20210303091609-39540e21d249`\u3001\\n`github.com/tal-tech/go-zero@master`\\n\\n\u5176\u4e2d`github.com/tal-tech/go-zero v1.1.6-0.20210303091609-39540e21d249` \u8fd9\u79cd\u7248\u672c\u5728golang\u91cc\u9762\u79f0\u4e3a `Pseudo-versions`\\n\uff08\u4f2a\u7248\u672c\uff09\uff0c\u5176\u6ca1\u6709\u5b8c\u5168\u9075\u5faa\u4e0a\u6587\u4e2d\u7684\u7248\u672c\u89c4\u5219\uff0c\u4f2a\u7248\u672c\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a\\n\\n* \u7248\u672c\u57fa\u672c\u524d\u7f00\uff08 `vX.Y.Z-0` \u6216 `vX.0.0` \uff09\uff0c\u5982 `v1.1.6-0`\\n* \u65f6\u95f4\u6233\uff1a\u5373revision\u7684\u521b\u5efa\u65f6\u95f4\u6233\uff0c\u5982 `20210303091609`\\n* revision\u6807\u8bc6\u7b26\uff0c\u5982 `39540e21d249`\\n\\n\u6839\u636e\u57fa\u672c\u524d\u7f00\u7684\u4e0d\u540c\uff0c\u4f2a\u7248\u672c\u4f1a\u6709\u4e09\u79cd\u5f62\u5f0f\uff1a\\n\\n* `vX.0.0-yyyymmddhhmmss-abcdefabcdef` \uff1a\u5728\u6ca1\u6709 `release` \u7248\u672c\u65f6\u4f7f\u7528\\n* `vX.Y.Z-pre.0.yyyymmddhhmmss-abcdefabcdef` \uff1a\u5f53\u57fa\u672c\u7248\u672c\u662f\u9884\u53d1\u5e03\u7248\u672c\u65f6\u4f7f\u7528\\n* `vX.Y.(Z+1)-0.yyyymmddhhmmss-abcdefabcdef` \uff1a\u5f53 `release` \u7248\u672c\u7c7b\u4f3c `vX.Y.Z`\\n  \u65f6\u4f7f\u7528\uff0c\u5982 `github.com/tal-tech/go-zero v1.1.6-0.20210303091609-39540e21d249` \u7684 `release` \u7248\u672c\u4e3a `v1.1.5`\\n\\n> \u4f2a\u7248\u672c\u4e0d\u9700\u8981\u624b\u52a8\u8f93\u5165\uff0c\u5176\u4f1a\u5728\u6267\u884c\u90e8\u5206go\u547d\u4ee4\u83b7\u53d6\u67d0\u4e00\u6b21\u63d0\u4ea4\u8bb0\u5f55\u7248\u672c(revision)\u7684\u4ee3\u7801\u4f5c\u4e3a\u4f9d\u8d56\u65f6\uff0c\u4f1a\u81ea\u52a8\u5c06\u5176\u8f6c\u6362\u4e3a\u4f2a\u7248\u672c\\n>\\n> \u4e0a\u6587\u4e2d\u7684 `github.com/tal-tech/go-zero v1.1.6-0.20210303091609-39540e21d249` \u5219\u662f\u5728\u6267\u884c `go get github.com/tal-tech/go-zero 39540e21d249e91f89d96d015a6e3795cfb2be44` \u540e\u81ea\u52a8\u8f6c\u6362\u7684\u7ed3\u679c\\n\\n### \u7248\u672c\u540e\u7f00\\n\\n\u4e3a\u4e86\u5411\u524d\u517c\u5bb9\uff0c\u5982\u679c `major version` \u5347\u7ea7\u52302\u65f6\uff0c\u6a21\u5757\u8def\u5f84\u5fc5\u987b\u8981\u6307\u5b9a\u4e00\u4e2a\u7248\u672c\u540e\u7f00 `v2`\uff08\u5176\u6570\u503c\u4fdd\u6301\u548c\u7248\u672c\u4e2d\u7684 `major version` \u7684\u503c\u4e00\u81f4\uff09\uff0c\u5728 `major version` \u5c0f\u4e8e2\u65f6\uff0c\u4e0d\u5141\u8bb8\u4f7f\u7528\u7248\u672c\u540e\u7f00\u3002\\n\\n\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u5728 `demo/foo` \u6a21\u5757\u5de5\u7a0b\u4e2d\u7528\u5230\u4e86 `miniRedis` \u8fd9\u4e2a\u5e93\uff0c\u8be5\u5e93\u7684 `major version` \u5df2\u7ecf\u5347\u7ea7\u52302\u4e86\uff0c\u5047\u8bbe\u6211\u5728go.mod\u4e2d\u5f15\u7528\u5982\u4e0b\u7248\u672c\u4f1a\u600e\u4e48\u6837\uff1f\\n\\n```text\\nmodule github.com/foo\\n\\ngo 1.16\\n\\n// \u6b63\u786e\u5f15\u5165\\n// require github.com/alicebob/miniredis/v2 v2.14.1 \\n\\n// \u9519\u8bef\u5f15\u5165\\nrequire github.com/alicebob/miniredis v2.14.1\\n```\\n\\n```text\\ninvalid version: module contains a go.mod file, so major version must be compatible: should be v0 or v1, not v2\\n```\\n\\n\u4e0a\u9762\u662fgo mod\u4f7f\u7528\u65f6\u7684\u573a\u666f\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5f53main module\u7684release\u7248\u672c\u5347\u7ea7\u5230 `v2.x.x` \u65f6(\u524d\u63d0\u5148\u53d1\u4e00\u4e2av1.0.0\u7684\u7248\u672c)\uff0cmodule path\u6ca1\u6709\u6dfb\u52a0\u7248\u672c\u540e\u7f00\uff0c\u5728\u53e6\u4e00\u4e2amodule\u53bb\u4f7f\u7528\u5b83\u4f1a\u6709\u4ec0\u4e48\u6548\u679c\uff1a\\n\u793a\u4f8bmodule [foo](https://github.com/anqiansong/foo)\\n`foo` \u5de5\u7a0b\u76ee\u524d\u6709release\u7248\u672c\\n\\n* `v1.0.0`\\n* `v2.0.1`\\n* ...\\n\\n\u4f7f\u7528module\u7684\u5de5\u7a0b `bar`\\n\\n* \u672a\u6dfb\u52a0\u7248\u672c\u540e\u7f00\u524d\\n\\n`foo` \u5de5\u7a0b\u76ee\u5f55\u6811\\n\\n```text\\nfoo\\n\u251c\u2500\u2500 echo\\n\u2502   \u2514\u2500\u2500 echo.go\\n\u2514\u2500\u2500 go.mod\\n\\n```\\n\\nmodule path \u4e3a `github.com/anqiansong/foo`\\n\\n```text\\nmodule github.com/anqiansong/foo\\n\\ngo 1.16\\n```\\n\\n\u5728\u5de5\u7a0b `bar` \u7684go.mod\u4f7f\u7528 `v2.0.0` \u7248\u672c\\n\\n```text\\nrequire github.com/anqiansong/foo v2.0.0\\n```\\n\\n\u4f60\u4f1a\u53d1\u73b0\u62a5\u9519\u5185\u5bb9\u4e3a\\n\\n```text\\n require github.com/anqiansong/foo: reading https://goproxy.cn/github.com/anqiansong/foo/@v/v2.0.0.info: 404 Not Found\\n\\tserver response: not found: github.com/anqiansong/foo@v2.0.0: invalid version: module contains a go.mod file, so major version must be compatible: should be v0 or v1, not v2\\n```\\n\\n\u5982\u679c `require github.com/anqiansong/foo v1.0.0` \u662f\u53ef\u4ee5\u7684\u3002\\n\\n* \u6dfb\u52a0\u7248\u672c\u540e\u7f00\u540e\\n\\n`foo` \u5de5\u7a0b\u76ee\u5f55\u6811\\n\\n```text\\nfoo\\n\u251c\u2500\u2500 echo\\n\u2502   \u2514\u2500\u2500 echo.go\\n\u2514\u2500\u2500 go.mod\\n\\n```\\n\\nmodule path \u4e3a `github.com/anqiansong/foo/v2`\\n\\n```text\\nmodule github.com/anqiansong/foo/v2\\n\\ngo 1.16\\n```\\n\\n\u5728\u5de5\u7a0b `bar` \u7684go.mod\u4f7f\u7528 `v2.0.1` \u7248\u672c\\n\\n```text\\nrequire github.com/anqiansong/foo/v2 v2.0.1\\n```\\n\\n`bar` \u8fd0\u884c\u6b63\u5e38\\n\\n\\n> \u5982\u679c `major version` \u5347\u7ea7\u81f3 `v2` \u65f6\uff0c\u5982\u679c\u8be5\u7248\u672c\u6ca1\u6709\u6253\u7b97\u5411\u524d\u517c\u5bb9\uff0c\u4e14\u4e0d\u60f3\u628amodule path\u6dfb\u52a0\u7248\u672c\u540e\u7f00\uff0c\u5219\u53ef\u4ee5\u5728build tag\u65f6\u4ee5 `+incompatible` \u7ed3\u5c3e\u5373\u53ef\uff0c\\n> \u5219\u522b\u7684\u5de5\u7a0b\u5f15\u7528\u793a\u4f8b\u4e3a `require github.com/anqiansong/foo v2.0.0+incompatible`\\n\\n## \u5982\u4f55\u89e3\u6790package\u4e2d\u7684module\\n\\nGo \u547d\u4ee4\u9996\u5148\u5728\u6784\u5efa\u5217\u8868\u4e2d\u641c\u7d22\u5177\u6709\u5305\u8def\u5f84\u524d\u7f00\u7684\u6a21\u5757\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5bfc\u5165\u4e86\u5305 `example.com/a/b` \uff0c\u800c\u6a21\u5757 `example.com/a` \u4f4d\u4e8e\u6784\u5efa\u5217\u8868\u4e2d\uff0c \u5219 go \u547d\u4ee4\u5c06\u68c0\u67e5 `example.com/a`\\n\u662f\u5426\u5305\u542b\u76ee\u5f55 `b` \u4e2d\u7684\u5305\u3002\u4e14\u8be5\u76ee\u5f55\u4e2d\u81f3\u5c11\u5305\u542b\u4e00\u4e2ago\u6587\u4ef6\uff0c\u8fd9\u6837\u624d\u80fd\u88ab\u89c6\u4e3a `package` \u3002\u751f\u6210\u7ea6\u675f\u4e0d\u5e94\u7528\u4e8e\u6b64\u76ee\u7684\u3002 \u5982\u679c\u751f\u6210\u5217\u8868\u4e2d\u53ea\u6709\u4e00\u4e2a\u6a21\u5757\u63d0\u4f9b\u5305\uff0c\u5219\u4f7f\u7528\u8be5\u6a21\u5757\u3002\u5982\u679c\u6ca1\u6709\u6a21\u5757\u63d0\u4f9b\u5305\uff0c\u6216\u8005\u6709\u4e24\u4e2a\u6216\u591a\u4e2a\u6a21\u5757\u63d0\u4f9b\u5305\uff0c\u5219 `go`\\n\u547d\u4ee4\u62a5\u544a\u9519\u8bef\u3002`mod=mod` \u6807\u5fd7\u6307\u793a `go` \u547d\u4ee4\u5c1d\u8bd5\u67e5\u627e\u63d0\u4f9b\u4e22\u5931\u5305\u7684\u65b0\u6a21\u5757\uff0c \u5e76\u66f4\u65b0 `go.mod` \u548c `go.sum` \u3002`go get` \u548c `go mod tidy` \u547d\u4ee4\u4f1a\u81ea\u52a8\u6267\u884c\u6b64\u64cd\u4f5c\u3002\\n\\n\u5f53go\u547d\u4ee4\u66f4\u65b0\u6216\u8005\u83b7\u53d6module\u4f9d\u8d56\u65f6\uff0c\u5176\u4f1a\u68c0\u67e5 `GOPROXY` \u73af\u5883\u53d8\u91cf\uff0c`GOPROXY` \u7684\u503c\u662f\u4e00\u4e2a\u9017\u53f7\u5206\u5272\u7684url\u5217\u8868\uff0c\u6216\u8005\u662f\u5173\u952e\u5b57 `direct` \u3001 `off`\uff0c\\n\\n* \u9017\u53f7\u5206\u5272\u7684\u5177\u4f53url\u4e3a\u4ee3\u7406\u5730\u5740\uff0c\u5176\u4f1a\u544a\u77e5 `go` \u547d\u4ee4\u4ee5\u6b64\u503c\u53bb\u53d1\u8d77\u8fde\u63a5\\n* `direct`\uff1a \u6307\u5b9amodule\u4f9d\u8d56\u901a\u8fc7\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u53bb\u83b7\u53d6\\n* `off`\uff1a \u8868\u793a\u4e0d\u5c1d\u8bd5\u8fde\u63a5\u83b7\u53d6module\\n\\n\u5982\u679c `GOPROXY` \u8bbe\u7f6e\u4e86\u5177\u4f53\u7684url\uff0c\u5047\u8bbe `go` \u547d\u4ee4\u8981\u5bfb\u627e\u4e00\u4e2a`github.com/tal-tech/go-zero/zrpc`\u7684 `package`\uff0c`go` \u547d\u4ee4\u4f1a\u5e76\u884c\u7684\u53bb\u67e5\u627e\u4e00\u4e0bmodule\\n\\n* `github.com/tal-tech/go-zero/zrpc`\\n* `github.com/tal-tech/go-zero`\\n* `github.com/tal-tech`\\n* `github.com`\\n\\n\u5982\u679c\u5176\u4e2d\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5339\u914d\u5230\u5305\u542b\u6ee1\u8db3 `github.com/tal-tech/go-zero/zrpc` \u7684\u5185\u5bb9\uff0c\u5219\u53d6\u6700\u957f\u7684 `module`\u4f5c\u4e3a\u4f9d\u8d56\uff0c\u5728\u627e\u5230\u5408\u9002\u7684module\u548c\u7248\u672c\u540e\uff0c`go` \u547d\u4ee4\u4f1a\u5411 `go.mod`\\n\u548c `go.sum` \u6587\u4ef6\u4e2d\u586b\u5199`require`\uff0c \uff0c\u5982\u679c\u89e3\u6790\u5230\u7684 `module` \u4e0d\u662f main module \u4e3b\u52a8\u5f15\u5165\u7684\uff0c\u5219\u4f1a\u5728 `require` \u7684\u503c\u540e\u9762\u6dfb\u52a0 `// direct`\\n\u6ce8\u91ca\uff0c\u5982\u679c\u4e00\u4e2a\u90fd\u6ca1\u6709\u5339\u914d\u5230\uff0c\u5219\u62a5\u9519\uff1b\u5982\u679c `GOPROXY` \u6709\u591a\u4e2aurl\u4ee3\u7406\uff0c\u5728\u524d\u9762\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u4f9d\u6b21 \u5411\u540e\u9762\u4ee3\u7406\u6267\u884c\u4e0a\u9762\u7684\u6b65\u9aa4\u3002\\n\\n## go.mod \u6587\u4ef6\\n\\n\u4e00\u4e2a `module`\uff08\u6a21\u5757\u5de5\u7a0b\uff09\u7684\u6807\u8bc6\u662f\u5728\u5176\u6839\u76ee\u5f55\u4e0b\u5305\u542b\u4e00\u4e2a\u7f16\u7801\u4e3a `UTF-8`\u3001\u540d\u79f0\u4e3a `go.mod` \u7684\u6587\u672c\u6587\u4ef6\uff0c`go.mod` \u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u662f\u9762\u5411`\u884c`\u7684\uff0c\u6bcf\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6307\u4ee4\uff0c\u4e14\u6bcf\u884c\u5747\u7531\u4e00\u4e2a `\u5173\u952e\u5b57` \u548c `\u53c2\u6570`\\n\u7ec4\u6210\uff0c\u5c31\u50cf\uff1a\\n\\n```text\\nmodule github.com/anqiansong/foo\\n\\ngo 1.16\\n\\nrequire github.com/tal-tech/go-zero\\nrequire github.com/tal-tech/go-queue\\n\\nreplace go.etcd.io/etcd => go.etcd.io/etcd v0.0.0-20200402134248-51bdeb39e698\\n\\nretract [v1.0.0, v1.0.1]\\n```\\n\\n\u5f53\u7136\uff0c\u62e5\u6709\u76f8\u540c\u5173\u952e\u5b57\u7684\u5185\u5bb9\u53ef\u4ee5\u5206\u79bb\u51fa\u6765\uff0c\u7528 `\u5173\u952e\u5b57` + `block`\u7ec4\u6210\uff0c\u5c31\u50cf\uff1a\\n\\n```text\\nmodule github.com/anqiansong/foo\\n\\ngo 1.16\\n\\nrequire (\\n    github.com/tal-tech/go-zero\\n    github.com/tal-tech/go-queue\\n)\\n\\nreplace go.etcd.io/etcd => go.etcd.io/etcd v0.0.0-20200402134248-51bdeb39e698\\n\\nretract [v1.0.0, v1.0.1]\\n```\\n\\n`go.mod`\u662f\u673a\u5668\u53ef\u5199\u7684\uff0c\u50cf\u6267\u884c\u4e00\u4e9b\u547d\u4ee4\uff08\u5982\uff1a `go get` \u3001 `go mod edit`\uff09\u53ef\u80fd\u4f1a\u81ea\u52a8\u66f4\u65b0 `go.mod`\u6587\u4ef6\u3002\\n\\n## module \u7ec4\u6210\u5143\u7d20\\n\\n\u5728\u89e3\u6790 `go.mod`\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u65f6\uff0c\u5176\u4f1a\u88ab\u89e3\u6790\u4e3a\\n\\n* `\u7a7a\u767d\u7b26` \uff1a \u5305\u542b\u7a7a\u683c(U+0020)\u3001\u5236\u8868\u7b26(U+0009)\u3001\u56de\u8f66(U+000D)\u548c\u6362\u884c\u7b26(U+000A)\\n* `\u6ce8\u91ca` \uff1a\u6ce8\u91ca\u4ec5\u652f\u6301\u5355\u884c\u6ce8\u91ca `//`\\n* `\u6807\u70b9` \uff1a\u6807\u70b9\u7b26\u53f7\u6709 `(` \u3001 `)` \u3001 `,` \u3001 `=>`\\n* `\u5173\u952e\u5b57` \uff1a `go` \u3001 `require` \u3001 `replace` \u3001 `exclude` \u3001 `retract`\\n* `\u6807\u8bc6\u7b26` \uff1a\u7531\u975e `\u7a7a\u767d\u7b26` \u7ec4\u6210\u7684\u5b57\u7b26\u5e8f\u5217\uff0c\u5982 module path\u3001\u8bed\u4e49\u7248\u672c\\n* `\u5b57\u7b26\u4e32` \uff1a\u7531\u82f1\u6587\u53cc\u5f15\u53f7 `\\"` \uff08U+0022\uff09\u5305\u88f9\u7684\u89e3\u91ca\u5b57\u7b26\u4e32\u6216\u8005\u6709 `<` \uff08U+0060\uff09\u5305\u88f9\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u3002\u5982`\\"github/com/tal-tech/go-zero\\"`\u3001``\\n\\n> `\u6807\u8bc6\u7b26` \u548c `\u5b57\u7b26\u4e32`\u5728 `go.mod`\u8bed\u6cd5\u4e2d\u53ef\u4ee5\u66ff\u6362\\n\\n## module \u8bed\u6cd5\u8bcd\u6cd5\\n\\n`go.mod` \u8bed\u6cd5\u662f\u901a\u8fc7`Extended Backus-Naur Form` (EBNF\u8303\u5f0f) \u5b9a\u4e49\u7684\uff0c\u5c31\u50cf\\n\\n```BNF\\nGoMod = { Directive } .\\nDirective = ModuleDirective |\\n            GoDirective |\\n            RequireDirective |\\n            ExcludeDirective |\\n            ReplaceDirective |\\n            RetractDirective .\\n```\\n\\n### `module` \u6307\u4ee4\\n\\n`module` \u5173\u952e\u5b57\u5b9a\u4e49\u4e86main module\u7684module path\uff0c\u5728 `go.mod` \u6587\u4ef6\u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u4e2a `module` \u6307\u5b9a\u3002\\n\\n\u8bed\u6cd5\u89c4\u5219\uff1a\\n\\n```text\\nModuleDirective = \\"module\\" ( ModulePath | \\"(\\" newline ModulePath newline \\")\\" newline .\\n```\\n\\n\u793a\u4f8b\uff1a\\n\\n```text\\nmodule github.com/tal-tech/go-zero\\n```\\n\\n### `go` \u6307\u4ee4\\n\\n`go` \u5173\u952e\u5b57\u5b9a\u4e49\u4e86 `module` \u8bbe\u7f6e\u9884\u671f\u4f7f\u7528\u7684go\u8bed\u8a00\u7248\u672c\uff0c\u7248\u672c\u5fc5\u987b\u662f\u4e00\u4e2a\u6709\u6548\u7684go\u7248\u672c\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u7b26\u5408 `version` \u89c4\u5219\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e3aGo\u5df2\u7ecfrelease\u7684\u7248\u672c\uff09\\n\\n\u901a\u8fc7 `go` \u5173\u952e\u5b57\u5b9a\u4e49\u7248\u672c\u540e\uff0c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u5305\u65f6\u5c31\u77e5\u9053\u5e94\u8be5\u4f7f\u7528\u54ea\u4e2ago\u7248\u672c\u53bb\u7f16\u8bd1\uff0c\u9664\u6b64\u5916\uff0c`go` \u5173\u952e\u5b57\u5b9a\u4e49\u7248\u672c\u8fd8\u53ef\u4ee5\u7528\u4e8e \u662f\u5426\u542f\u7528 `go`\u547d\u4ee4\u7684\u4e00\u4e9b\u7279\u6027\uff0c\u5982\u662f\u5426\u81ea\u52a8\u5f00\u59cbvendoring\u5728\u7248\u672c `1.14` \u53ca\u4ee5\u540e\u3002\\n\\n\u8bed\u6cd5\u89c4\u5219:\\n\\n```text\\nGoDirective = \\"go\\" GoVersion newline .\\nGoVersion = string | ident .  /* valid release version; see above */\\n```\\n\\n\u793a\u4f8b\uff1a\\n\\n```text\\ngo 1.16\\n```\\n\\n### `require` \u6307\u4ee4\\n\\n`require` \u58f0\u660e\u4e86module\u4f9d\u8d56\u7684\u6700\u5c0f\u7248\u672c\uff0c\u5728 `require` \u6307\u5b9a\u7248\u672c\u540e\uff0c`go` \u76f8\u5173\u547d\u4ee4\u4f1a\u6839\u636e [MVS](https://golang.org/ref/mod#minimal-version-selection)\\n\u89c4\u5219\u6839\u636e\u6b64\u503c\u6765\u52a0\u8f7d\u4f9d\u8d56\u3002\\n\\n`go` \u5bfb\u627e\u4f9d\u8d56\u65f6\uff0c\u5982\u679c\u8be5\u4f9d\u8d56\u4e0d\u662fmain module\u76f4\u63a5\u4f9d\u8d56\u7684\uff0c\u5219\u4f1a\u5728\u8be5module path \u540e\u9762\u6dfb\u52a0 `// direct` \u6ce8\u91ca\u5185\u5bb9\u3002\\n\\n\u8bed\u6cd5\u89c4\u5219\uff1a\\n\\n```text\\nRequireDirective = \\"require\\" ( RequireSpec | \\"(\\" newline { RequireSpec } \\")\\" newline ) .\\nRequireSpec = ModulePath Version newline .\\n```\\n\\n\u793a\u4f8b\uff1a\\n\\n```text\\nmodule github.com/tal-tech/go-zero\\n\\ngo 1.16\\n\\nrequire (\\n    golang.org/x/crypto v1.4.5 // indirect\\n    golang.org/x/text v1.6.7\\n)\\n```\\n\\n### `excule` \u6307\u4ee4\\n\\n`excule` \u4f1a\u5ffd\u7565\u5185\u5bb9\u4e2d\u7684\u6307\u5b9a\u7248\u672c\uff0c\u4ece `go 1.16` \u540e\uff0c`exclude` \u6307\u5b9a\u7684module\u4f1a\u88ab\u5ffd\u7565\uff0c \u5728 `go 1.16` \u524d\uff0c \u5982\u679c `require` \u7684module\u88ab `exclude`\\n\u6307\u5b9a\u540e\uff0c\u4f1a\u5217\u51fa\u5e76\u83b7\u53d6\u66f4\u6539\u7684\u4e3a\u88ab `exclude` \u7684\u7248\u672c\u3002\\n\\n\u8bed\u6cd5\u89c4\u5219\uff1a\\n\\n```text\\nExcludeDirective = \\"exclude\\" ( ExcludeSpec | \\"(\\" newline { ExcludeSpec } \\")\\" ) .\\nExcludeSpec = ModulePath Version newline .\\n```\\n\\n\u793a\u4f8b\uff1a\\n\\n```text\\nmodule github.com/tal-tech/go-zero\\n\\ngo 1.16\\n\\nexclude golang.org/x/net v1.2.3\\n\\nexcule (\\n    golang.org/x/crypto v1.4.5\\n    golang.org/x/text v1.6.7\\n)\\n```\\n\\n### `replace` \u6307\u4ee4\\n\\n`replace` \u6307\u4ee4\u7528\u4e8e\u5c06module\u7684\u6307\u5b9a\u7248\u672c\u6216\u8005module\u4f7f\u7528\u5176\u4ed6\u7684module\u6216\u8005\u7248\u672c\u6765\u66ff\u6362\uff0c\u5982\u679c `=>` \u5de6\u8fb9\u8d28\u6307\u5b9a\u4e86\u7248\u672c\uff0c\u5219\u66ff\u6362 \u8fd9\u4e2a\u7248\u672c\u81f3\u76ee\u6807\u5185\u5bb9\uff0c\u5426\u5219\u66ff\u6362\u66ff\u6362module\u7684\u6240\u6709\u7248\u672c\u81f3\u76ee\u6807\u5185\u5bb9\\n\\n\u8bed\u6cd5\u89c4\u5219\uff1a\\n\\n```text\\nReplaceDirective = \\"replace\\" ( ReplaceSpec | \\"(\\" newline { ReplaceSpec } \\")\\" newline \\")\\" ) .\\nReplaceSpec = ModulePath [ Version ] \\"=>\\" FilePath newline\\n            | ModulePath [ Version ] \\"=>\\" ModulePath Version newline .\\nFilePath = /* platform-specific relative or absolute file path */\\n```\\n\\n\u793a\u4f8b\uff1a\\n\\n```text\\nreplace golang.org/x/net v1.2.3 => example.com/fork/net v1.4.5\\n```\\n\\n`=>` \u53f3\u8fb9\u7684\u5185\u5bb9\u53ef\u4ee5\u662f\u6709\u6548\u7684module path\uff0c\u4e5f\u53ef\u4ee5\u662f\u76f8\u5bf9\u6216\u8005\u7edd\u5bf9\u8def\u5f84\uff0c\u5982\u679c\u662f\u76f8\u5bf9\u6216\u8005\u7edd\u5bf9\u8def\u5f84\uff0c\u8fd9\u8be5\u8def\u5f84\u7684\u6839\u76ee\u5f55\u5fc5\u987b\u5305\u542b `go.mod` \u6587\u4ef6\u3002\\n\\n\u793a\u4f8b\uff1a\\n\\n```text\\nrequire github.com/foo v1.0.0\\n\\nreplace github.com/foo v1.0.0 => ../bar\\n```\\n\\n### `retract` \u6307\u4ee4(1.16\u65b0\u589e)\\n\\n`retract` \u58f0\u660e\u7684\u5185\u5bb9\uff0c\u7528\u4e8e\u6807\u8bb0\u67d0\u4e9b\u7248\u672c\u6216\u8005\u67d0\u4e2a\u7248\u672c\u8303\u56f4\uff08\u95ed\u533a\u95f4\uff09\u6807\u8bb0\u4e3a\u64a4\u56de\uff0c\u4e00\u822c `retract` \u58f0\u660e\u524d\u9700\u8981\u5199\u4e00\u6761\u6ce8\u91ca\u7528\u4e8e\u8bf4\u660e\uff0c\u5f53\u6267\u884c `go get` \u547d\u4ee4\u65f6\uff0c \u5982\u679c\u5f15\u7528\u4e86\u88ab\u6807\u8bb0\u4e3a `retract` \u7684\u7248\u672c\uff0c\u6216\u8005\\n\u5728 `retract` \u6807\u8bb0\u7684\u7248\u672c\u8303\u56f4\u5185\uff0c\u5219\u4f1a\u63d0\u793a\u4e00\u6761\u8b66\u544a\uff08\u5176\u5185\u5bb9\u4e3a `retract` \u7684\u6ce8\u91ca\u5185\u5bb9\uff09\uff0c\u901a\u8fc7`go list -m -versions` \u83b7\u53d6\u7248\u672c\u65f6\u4e5f\u4f1a\u9690\u85cf\u8be5\u7248\u672c\u3002\\n\\n\u8bed\u6cd5\u89c4\u5219\uff1a\\n\\n```text\\nRetractDirective = \\"retract\\" ( RetractSpec | \\"(\\" newline { RetractSpec } \\")\\" ) .\\nRetractSpec = ( Version | \\"[\\" Version \\",\\" Version \\"]\\" ) newline .\\n```\\n\\n\u793a\u4f8b\uff1a\\n\\n```text\\n// someting wrong\\nretract v1.0.0\\n\\n// someting wrong in range of versions => v1.0.0~v1.2.0 \\nretrace [v1.0.0,v1.2.0]\\n```\\n\\n\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff0c\u76ee\u524d `github.com/anqiansong/retract` \u5df2\u7ecf\u6709 `v1.0.0` \u7b49\u7248\u672c\u4e86\uff0c\u6211\u4eec \u6dfb\u52a0\u4e00\u884c `retract` \u6307\u4ee4\u6807\u8bb0\\n`v1.0.0` \u64a4\u56de\uff1a\\n\\n```text\\n// someting wrong\\nretract v1.0.0\\n```\\n\\n\u7136\u540erelease\u4e00\u4e2a\u7248\u672c\u4e3a `v1.0.1` \uff0c\u63a5\u4e0b\u6765\u5728 `github.com/anqiansong/bar` \u4e2d\u5f15\u7528 `v1.0.0`\u7248\u672c\\n\\n```text\\nrequire github.com/anqiansong/retract v1.0.0\\n```\\n\\n\u7136\u540e\u6267\u884c `go get github.com/anqiansong/retract@v1.0.0` \uff0c \u4e0d\u51fa\u610f\u5916\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u63d0\u793a\u5305\u542b `something wrong` \u548c \u63d0\u793a\u66f4\u65b0\u5230 `v1.0.1` \u7684\u4fe1\u606f\\n\\n```shell\\n$ go get github.com/anqiansong/retract@v1.0.0\\n```\\n\\n```text\\ngo: warning: github.com/anqiansong/retract@v1.0.0: retracted by module author: someting wrong\\ngo: to switch to the latest unretracted version, run:\\n        go get github.com/anqiansong/retract@latestgo get: downgraded github.com/anqiansong/retract v1.0.1 => v1.0.0\\n```\\n\\n\u83b7\u53d6 `github.com/anqiansong/retract` \u6240\u6709module release\u7248\u672c\\n\\n```shell\\n$ go list -m -versions github.com/anqiansong/retract\\n```\\n\\n```text\\ngithub.com/anqiansong/retract v1.0.1\\n```\\n\\n\u90e8\u5206\u547d\u4ee4\u67e5\u770b `github.com/anqiansong/retract@v1.0.0`\u7684\u7ed3\u679c\uff1a\\n\\n* `go get`\\n    ```shell\\n    $ go get github.com/anqiansong/retract@v1.0.0\\n    ```\\n    ```text\\n    go: warning: github.com/anqiansong/retract@v1.0.0: retracted by module author: someting wrong\\n    go: to switch to the latest unretracted version, run:\\n    go get github.com/anqiansong/retract@latest\\n    ```\\n* `go list -m -u`\\n    ```shell\\n    $ go get github.com/anqiansong/retract@v1.0.0\\n    ```\\n    ```text\\n    github.com/anqiansong/retract v1.0.0 (retracted) [v1.0.1]\\n    ```\\n\\n* `go list -m -versions`\\n  ```shell\\n    $ go list -m -versions github.com/anqiansong/retract\\n    ```\\n    ```text\\n    github.com/anqiansong/retract v1.0.1\\n    ```\\n\\n> \u8bf4\u660e\uff1a\\n>\\n> `retract` \u63a7\u5236\u7684\u662fmain module\u7684\u7248\u672c\uff0c\u800c\u975e\u4f9d\u8d56\u7684module \u7248\u672c\u3002\\n>\\n> \u88ab `retract` \u6807\u8bb0\u7684\u7248\u672c\u5176\u4ed6module\u8fd8\u662f\u53ef\u4ee5\u5f15\u7528\u7684\uff0c\u53ea\u662f\u90e8\u5206 `go` \u547d\u4ee4\u6267\u884c\u65f6\u4f1a\u6709 `retract` \u7684\u4e0d\u540c\u7ed3\u679c\uff0c\u5982\u4e0a\u3002\\n\\n## \u81ea\u52a8\u66f4\u65b0\\n\\n\u5982\u679c go.mod \u7f3a\u5c11\u4fe1\u606f\u6216\u8005\u4e0d\u80fd\u51c6\u786e\u53cd\u6620\u5b9e\u9645\u60c5\u51b5\uff0c\u5927\u591a\u6570 `go` \u547d\u4ee4\u90fd\u4f1a\u62a5\u544a\u9519\u8bef\u3002`go get` \u3001 `go mod tidy` \u547d\u4ee4\u53ef\u4ee5\u7528\u6765\u4fee\u590d\u5927\u591a\u6570\u8fd9\u7c7b\u95ee\u9898\u3002 \u6b64\u5916\uff0c`-mod=mod`\\n\u6807\u5fd7\u53ef\u4ee5\u7528\u4e8e\u5927\u591a\u6570\u6a21\u5757\u611f\u77e5\u547d\u4ee4(`go build`\u3001 `go test` \u7b49) \uff0c\u4ee5\u6307\u793a `go` \u547d\u4ee4\u81ea\u52a8\u4fee\u590d `go.mod` \u548c `go.sum` \u4e2d\u7684\u95ee\u9898\u3002\\n\\n## module \u611f\u77e5\\n\\n\u5927\u591a\u6570 go \u547d\u4ee4\u53ef\u4ee5\u5728 `Module-ware` \u6a21\u5f0f\u6216 `GOPATH` \u6a21\u5f0f\u4e0b\u8fd0\u884c\u3002\u5728 `Module-ware` \u6a21\u5f0f\u4e0b\uff0cgo \u547d\u4ee4\u4f7f\u7528 go.mod \u6587\u4ef6\u6765\u67e5\u627e\u7248\u672c\u76f8\u5173\u6027\uff0c\\n\u5b83\u901a\u5e38\u4ece\u6a21\u5757\u7f13\u5b58\u4e2d\u52a0\u8f7d\u5305\uff0c\u5982\u679c\u7f3a\u5c11\u6a21\u5757\uff0c\u5219\u4e0b\u8f7d\u6a21\u5757\u3002\u5728 `GOPATH` \u6a21\u5f0f\u4e0b\uff0cgo \u547d\u4ee4\u5ffd\u7565module\uff1b \u5b83\u5728 `vendor` \u6216 `GOPATH` \u76ee\u5f55\u4e2d\u67e5\u627e\u4f9d\u8d56\u9879\u3002\\n\\n\u5728 Go 1.16\u4e2d\uff0c\u65e0\u8bba\u662f\u5426\u5b58\u5728 `go.mod` \u6587\u4ef6\uff0c`Module-ware` \u6a21\u5f0f\u9ed8\u8ba4\u662f\u542f\u7528\u7684\u3002\u5728\u4f4e\u7248\u672c\u4e2d\uff0c\u5f53\u5de5\u4f5c\u76ee\u5f55\u6587\u4ef6\u6216\u4efb\u4f55\u7236\u76ee\u5f55\u4e2d\u5b58\u5728 `go.mod` \u6587\u4ef6\u65f6\uff0c\u542f\u7528 `Module-ware` \u6a21\u5f0f \u3002\\n\\n`Module-ware` \u6a21\u5f0f\u53ef\u4ee5\u901a\u8fc7GO111MODULE \u73af\u5883\u53d8\u91cf\u63a7\u5236\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a `on`\u3001`off` \u6216 `auto`\\n\\n* `off` \uff1a`go` \u76f8\u5173\u547d\u4ee4\u4f1a\u5ffd\u7565 `go.mod`\u6587\u4ef6\uff0c\u7136\u540e\u4ee5 `GOPATH` \u6a21\u5f0f\u8fd0\u884c\\n* `on` \uff1a `on` \u6216\u8005\u7a7a\u5b57\u7b26\u4e32\uff0c \u76f8\u5173\u547d\u4ee4\u4f1a `Module-ware` \u6a21\u5f0f\u8fd0\u884c\\n* `auto`\uff1a \u5982\u679c\u5f53\u524d\u6587\u4ef6\u5939\u5b58\u5728 `go.mod` \u6587\u4ef6\uff0c\u5219\u4f1a\u4ee5 `Module-ware` \u6a21\u5f0f\u8fd0\u884c\uff0c\u5728 Go 1.15\u53ca\u66f4\u4f4e\u7248\u672c\uff0c\u6b64\u503c\u4e3a\u9ed8\u8ba4\u503c\uff0c\\n\\n## \u90e8\u5206go module\u76f8\u5173\u547d\u4ee4\\n\\n\u8fd9\u91cc\u547d\u4ee4\u5fc5\u987b\u8981\u5728 `Module-ware` \u6a21\u5f0f\u624d\u6709\u6548\\n\\n|\u547d\u4ee4|\u7528\u6cd5|\u5907\u6ce8|\u793a\u4f8b|\\n|---|---|---|---|\\n|go list -m|go list -m [-u] [-retracted] [-versions] [list flags] [modules]|\u67e5\u770bmodule\u4fe1\u606f|go list -m all|\\n|go mod init|go mod init [module-path]|\u5728\u5de5\u4f5c\u76ee\u5f55\u521d\u59cb\u5316\u5e76\u521b\u5efa\u4e00\u4e2ago.mod\u6587\u4ef6|go mod init demo|\\n|go mod tidy|go mod tidy [-e] [-v]|\u6574\u7406go.mod\u6587\u4ef6|go mode tidy|\\n|go clean -modcache|go clean [-modcache]|\u6e05\u9664module\u7f13\u5b58|go clean -modcache|\\n\\n## Proxy\\n\\n\u6a21\u5757\u4ee3\u7406\u662f\u4e00\u4e2a\u652f\u6301 `GET` \u8bf7\u6c42\u54cd\u5e94 \u7684`HTTP`\u670d\u52a1\u5668\uff0c\u8be5\u8bf7\u6c42\u6ca1\u6709 `query` \u53c2\u6570\uff0c\u751a\u81f3\u4e0d\u9700\u8981\u7279\u5b9a\u7684 `header` \u4fe1\u606f\uff0c\u5373\u4f7f \u8be5\u503c\u662f\u4e00\u4e2a\u56fa\u5b9a\u7684\u6587\u4ef6\u7cfb\u7edf\u7ad9\u70b9(\u5982\uff1a`file:// URL` )\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\\n\\n\u6a21\u5757\u4ee3\u7406\u7684 `HTTP` \u54cd\u5e94\u72b6\u6001\u7801\u5fc5\u987b\u5305\u542b `200`\uff08OK\uff09\uff0c`3xx`\uff0c`4xx`\u3001`5xx`\uff0c`4xx`\u3001`5xx`\u88ab\u8ba4\u4e3a\u662f\u54cd\u5e94\u9519\u8bef\uff0c`404` \u548c `410`\\n\u8868\u793a\u6240\u6709\u7684module\u8bf7\u6c42\u662f\u4e0d\u53ef\u7528\u7684\uff0c\u6ce8\u610f\uff0c\u9519\u8bef\u7684\u54cd\u5e94\u7684contentType \u5e94\u8be5\u8bbe\u7f6e\u4e3a `text/plain`\uff0c\u5b57\u7b26\u96c6\u4e3a `utf-8` \u6216\u8005 `us-ascii` \u3002\\n\\n### URLs\\n`go` \u547d\u4ee4\u53ef\u4ee5\u901a\u8fc7\u8bfb\u53d6 `GOPROXY` \u73af\u5883\u53d8\u91cf\u914d\u7f6e\u6765\u8fde\u63a5\u8fde\u63a5\u4ee3\u7406\u670d\u52a1\u5668\u6216\u8005\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff0c`GOPROXY` \u63a5\u53d7\u4e00\u4e2a\u9017\u53f7(,)\u6216\u8005\u7ad6\u7ebf(|)\u5206\u5272\u7684\u591a\u4e2aurl\u503c\uff0c \u5f53\u4ee5\u82f1\u6587\u9017\u53f7(,)\\n\u5206\u5272\u65f6\uff0c\u53ea\u6709\u54cd\u5e94\u72b6\u6001\u7801\u4e3a404\u6216\u8005410\u65f6\u5c31\u4f1a\u5c1d\u8bd5\u540e\u9762\u7684\u4ee3\u7406\u5730\u5740\uff0c\u5982\u679c\u662f\u4ee5\u7ad6\u7ebf(|)\u5206\u5272\uff0c\u5219\u5728http\u51fa\u73b0\u4efb\u4f55\u9519\u8bef\uff08\u5305\u542b\u8d85\u65f6\uff09\u90fd\u4f1a\u8df3\u8fc7\u53bb\u5c1d\u8bd5\u540e\u9762\u7684\u4ee3\u7406\u5730\u5740\u3002 \u4e5f\u53ef\u4ee5\u662f `direct` \u6216\u8005 `off` \u5173\u952e\u5b57\u3002\\n\\n\u4e0b\u9762\u7684\u8868\u683c\u4e3a\u4e00\u4e2a\u4ee3\u7406\u5730\u5740\u5fc5\u987b\u8981\u5b9e\u73b0\u4e14\u6709\u8bf7\u6c42\u54cd\u5e94\u7684path\uff08\u5373\u4e00\u4e2a\u4ee3\u7406\u670d\u52a1\u5668\u5fc5\u987b\u8981\u8981\u652f\u6301\u4e00\u4e0b\u8def\u7531\u7684\u5b9e\u73b0\uff09\\n\\n* `$base`\u4e3a\u4ee3\u7406\u670d\u52a1\u5668\u5730\u5740\uff0c\u5982\uff1ahttps://goproxy.cn\\n* `$module`\u4e3amodule path\uff0c\u5982\uff1agithub.com/tal-tech/go-zero\\n* `$version`\u4e3amodule \u7248\u672c\\n* \\n\u5728\u83b7\u53d6module\u6700\u65b0\u7248\u672c\u65f6\uff0c `go` \u76f8\u5173\u547d\u4ee4\u4f1a\u4f18\u5148\u8bf7\u6c42 `$base/$module/@v/list` \u5730\u5740\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u9002\u5408\u7684\u7248\u672c\uff0c\\n\u5219\u8bf7\u6c42 `$base/$module/@latest` \u83b7\u53d6\u5e76\u5339\u914d\u662f\u5426\u6ee1\u8db3\uff0c`go` \u76f8\u5173\u547d\u4ee4\u4f1a\u6309\u7167 `release` \u7248\u672c\u3001 `pre-release` \u7248\u672c\u3001 `pseudo` \u7248\u672c\u6392\u5e8f\u3002\\n\\n\u800c `$base/$module/$version.mod` \u548c `$base/$module/$version.zip` \u5730\u5740\u5fc5\u987b\u8981\u63d0\u4f9b\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4fe1\u606f\u53ef\u4ee5\u7528\u4e8e\u548c `go.sum` \u8fdb\u884c\u6570\u636e\u6821\u9a8c\u3002\\n\\ngo module\u4e0b\u8f7d\u540e\u7684\u5185\u5bb9\u4e00\u822c\u4f1a\u5b58\u50a8\u5728 `$GOPATH/pkg/mod/cache/download` \u8def\u5f84\u4e0b\uff0c\u5305\u62ec\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u4e0b\u8f7d\u7684\u4e5f\u662f\u5982\u6b64\u3002\\n\\n### direct\\n\u5982\u679c `GOPROXY` \u8bbe\u7f6e\u4e86 `direct` \u503c\uff0c\u5219\u5728\u6267\u884c\u76f8\u5173 `go` \u547d\u4ee4\u65f6\u4f1a\u4ece\u7248\u672c\u63a7\u5236\u7cfb\u7edf(`git`\u3001`svn`\u7b49)\u4e0b\u8f7dmodule\u8d44\u6e90\uff0c\u5f53\u7136\u8fd8\u9700\u8981\u53e6\u5916\u4e24\u4e2a\u73af\u5883\\n\u53d8\u91cf `GOPRIVATE` \u3001 `GONOPROXY` \u914d\u5408\uff0c\u66f4\u591a\u73af\u5883\u53d8\u91cf\u4fe1\u606f\u8bf7\u53c2\u8003[\u8fd9\u91cc](https://golang.org/ref/mod#environment-variables)\\n\\n## module\u6587\u4ef6\u5927\u5c0f\u7ea6\u675f\\n\u5bf9\u6a21\u5757 `zip` \u6587\u4ef6\u7684\u5185\u5bb9\u6709\u8bb8\u591a\u9650\u5236\u3002\u8fd9\u4e9b\u7ea6\u675f\u786e\u4fdd\u53ef\u4ee5\u5728\u5e7f\u6cdb\u7684\u5e73\u53f0\u4e0a\u5b89\u5168\u548c\u4e00\u81f4\u5730\u63d0\u53d6\u538b\u7f29\u6587\u4ef6\u3002\\n\\n\u4e00\u4e2a\u6a21\u5757\u6700\u591a\u53ef\u4ee5\u8fbe\u5230500MiB\uff08\u4e0d\u7ba1\u662f\u538b\u7f29\u5f62\u5f0f\u8fd8\u662f\u672a\u538b\u7f29\u5f62\u5f0f\u6587\u4ef6\uff09\\n\\n`go.mod`\u6587\u4ef6\u8981\u6c42\u663e\u793a\u572816MiB\u4ee5\u5185\\n\\n## go.sum\\n\u5728module\u7684\u6839\u76ee\u5f55\u4e0b\u53ef\u80fd\u6709\u4e00\u4e2a\u540d\u4e3a `go.sum`\u7684\u6587\u4ef6\uff0c\u5176\u662f\u76f4\u63a5\u4f9d\u9644\u5728go.mod\u4e0b\u9762\u7684\uff0c \u5f53\u6267\u884c `go` \u76f8\u5173\u547d\u4ee4\u83b7\u53d6module\u65f6\uff0c\\n\u5176\u4f1a\u68c0\u67e5 `zip` \u6587\u4ef6\u548c `go.sum` \u4e2d\u7684\u503c\u662f\u5426\u4e00\u81f4\u3002\\n\\n`go.sum` \u4e2d\u7684\u503c\u7531\u4e00\u4e2a `module path`\u3001`version` \u548c\u4e00\u4e2a`hash`\u503c\u7ec4\u6210\uff0c\u5982\uff1a\\n```text\\ngithub.com/anqiansong/retract v1.0.1 h1:jxcsUM/6tvxM7p14/XMeZPFbql5KAAZJfFqiHG+YKxA=\\n```\\n\\n# \u603b\u7ed3\\n\u82b1\u4e863\u5929\u65f6\u95f4\uff0c\u7b2c\u4e00\u5929\u770b\u82f1\u6587\u539f\u6587\u6863\uff0c\u7b2c\u4e8c\u3001\u4e09\u5929\u7ffb\u8bd1\u6210\u4e2d\u6587\u6765\u9a8c\u8bc1\u81ea\u5df1\u7684\u7406\u89e3\uff0c\u5e76\u5199\u4e0b\u8fd9\u7bc7\u65e5\u5fd7\uff0c\u7ecf\u8fc7\u5b66\u4e60\uff0c\u5bf9\u4e8ego module\u624b\u518c\u7684\u5b66\u4e60\u89e3\u5f00\u4e86\u4e0d\u5c11\u7591\u60d1\uff0c\\n\u81f3\u5c11\u5f00\u7bc7\u7684\u51e0\u4e2a\u95ee\u9898\u7b97\u662f\u89e3\u5f00\u4e86\uff0c\u672c\u6587\u4e5f\u662f\u5c06\u624b\u518c\u4e2d\u7684\u90e8\u5206\u5185\u5bb9\u4f5c\u4e86 `\u642c\u8fd0` \u7ed3\u5408\u4e86\u81ea\u5df1\u7684\u4e00\u4e9b\u7406\u89e3\uff0c\\n\u4ee5\u53ca\u7528\u771f\u5b9e\u4f8b\u5b50\u53bb\u9a8c\u8bc1\uff0c \u5176\u4e2d\u8fd8\u6709\u5f88\u591a\u5185\u5bb9\u6211\u5e76\u672a\u5b8c\u5168\u7167\u642c\uff0c\u5982\u679c\u6709\u5174\u8da3\u7684\u540c\u5b66\uff0c\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u624b\u518c\uff0c\u672c\u6587\u90e8\u5206\u5185\u5bb9\u5305\u542b\u4e2a\u4eba\u7406\u89e3\uff0c\u4e5f\u662f\u7ed3\u5408google\u7ffb\u8bd1\u52a0\u4e0a\\n\u5bf9\u4e00\u4e9b\u7ffb\u8bd1\u4e0d\u5408\u7406\u7684\u5730\u65b9\u8fdb\u884c\u4eba\u5de5\u7ffb\u8bd1\uff0c\u80af\u5b9a\u5b58\u5728\u4e0d\u5408\u7406\u7684\u5730\u65b9\uff0c\u5982\u679c\u6709\u7406\u89e3\u4e0d\u4e00\u81f4\u7684\uff0c\u6b22\u8fce\u63d0\u51fa\u548c\u8ba8\u8bba\u3002\\n\\n# \u6700\u540e\\n\u6709\u6536\u83b7\u53ef\u4ee5\u5230 [github](https://github.com/anqiansong/golang-notes/blob/main/go-module.md) \u70b9\u4e2a\u5c0f\u2764\ufe0f\u2764\ufe0f \u54c8\u3002\\n\\n# \u53c2\u8003\u6587\u6863\\n* [\u300aSemantic Versioning 2.0.0\u300b](https://semver.org/spec/v2.0.0.html)\\n* [\u300aGo Module\u5b98\u65b9\u6587\u6863\u300b](https://golang.org/ref/mod)"},{"id":"/go/channel-limiter","metadata":{"permalink":"/go/channel-limiter","source":"@site/blog/go/channel-limiter.md","title":"\u5de7\u5999\u4f7f\u7528channel\u5b9e\u73b0\u9650\u6d41\u5668","description":"cover","date":"2020-05-10T00:00:00.000Z","formattedDate":"2020\u5e745\u670810\u65e5","tags":[{"label":"go","permalink":"/tags/go"},{"label":"limiter","permalink":"/tags/limiter"},{"label":"\u9650\u6d41\u5668","permalink":"/tags/\u9650\u6d41\u5668"},{"label":"channel","permalink":"/tags/channel"}],"readingTime":1.2033333333333334,"truncated":true,"authors":[{"name":"Keson","title":"\u5b57\u8282\u8df3\u52a8\u5f00\u53d1\u5de5\u7a0b\u5e08 /  goctl \u7ef4\u62a4\u4eba","url":"https://github.com/anqiansong","imageURL":"/img/logo.webp","key":"keson"}],"frontMatter":{"title":"\u5de7\u5999\u4f7f\u7528channel\u5b9e\u73b0\u9650\u6d41\u5668","date":"2020-05-10T00:00:00.000Z","authors":"keson","tags":["go","limiter","\u9650\u6d41\u5668","channel"]},"prevItem":{"title":"\u4e3a\u4ec0\u4e48\u770b\u4e86 N \u6b21 go module, \u5c31\u662f\u8bb0\u4e0d\u4f4f\uff1f","permalink":"/go/golang-module"}},"content":"![cover](../resource/202005/channel-limiter.png)\\n\\n### \u666e\u901aLimiter\\n\u7279\u70b9\uff1a\u65e0\u65f6\u95f4\u9650\u5236\uff0c\u53ea\u8981\u4e0d\u8d85\u8fc7\u6570\u91cf\u5c31\u53ef\u901a\u8fc7\\n\\n\x3c!-- truncate --\x3e\\n\\n```go\\n// \u57fa\u4e8echannel\u963b\u585e\u5b9e\u73b0\\n// \u7f3a\u70b9\uff1a\u963b\u585e\u65e0\u65f6\u95f4\u9650\u5236\\ntype (\\n\\tChannelLimiter struct {\\n\\t\\tbufferChannel chan golang.PlaceholderType\\n\\t}\\n)\\n\\nfunc NewChannelLimiter(limit int) *ChannelLimiter {\\n\\treturn &ChannelLimiter{bufferChannel: make(chan golang.PlaceholderType, limit)}\\n}\\n\\nfunc (l *ChannelLimiter) Allow() bool {\\n\\tselect {\\n\\tcase l.bufferChannel <- golang.Placeholder:\\n\\t\\treturn true\\n\\tdefault:\\n\\t\\treturn false\\n\\t}\\n}\\n\\nfunc (l *ChannelLimiter) Release() bool {\\n\\t<-l.bufferChannel\\n\\treturn true\\n}\\n\\nfunc (l *ChannelLimiter) Close() {\\n\\tclose(l.bufferChannel)\\n}\\n\\n```\\n\\n### \u4ee4\u724c\u6876Limiter\\n\u7279\u70b9\uff1a[\u4ee4\u724c\u6876](https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95/6597000?fr=aladdin)\\n\\n```go\\n// \u4ee4\u724c\u6876\u7b97\u6cd5\\n// \u4ea7\u751f\u4ee4\u724c\uff1a\u5747\u4e3a\u95f4\u9694\u65f6\u95f4\u5185\uff081\u79d2\uff09\u5411\u6307\u5b9a\u6876\u4e2d\u4ea7\u751f\u6307\u5b9a\u6570\u91cf\u7684\u4ee4\u724c\\n// \u6d88\u8d39\u4ee4\u724c\uff1a\u4ece\u6876\u4e2d\u83b7\u53d6\u4ee4\u724c\u5e76\u6d88\u8d39\\n// \u601d\u8def\uff1a\u901a\u8fc7channel\u963b\u585e\u539f\u7406\u6765\u5b9e\u73b0\\n\\ntype (\\n\\tTokenBucketLimiter struct {\\n\\t\\tt      *time.Ticker\\n\\t\\tbucket chan golang.PlaceholderType\\n\\t\\tdoneC  channel.DoneChan\\n\\t\\tlimit  int\\n\\t\\trate   int\\n\\t\\tstop   func()\\n\\t}\\n)\\n\\n// rate\uff1atoken put rates per second\\n// limit\uff1amax limit\\nfunc NewTokenBucketLimiter(rate, limit int) *TokenBucketLimiter {\\n\\tt := time.NewTicker(time.Second)\\n\\tdoneC := channel.NewDoneChan()\\n\\tbucket := make(chan golang.PlaceholderType, limit)\\n\\ttbl := &TokenBucketLimiter{\\n\\t\\trate:   rate,\\n\\t\\tt:      t,\\n\\t\\tbucket: bucket,\\n\\t\\tdoneC:  doneC,\\n\\t\\tlimit:  limit,\\n\\t\\t// only stop once\\n\\t\\tstop: routine.DoOnce(func() {\\n\\t\\t\\tdoneC.Stop()\\n\\t\\t\\tclose(bucket)\\n\\t\\t\\tt.Stop()\\n\\t\\t}),\\n\\t}\\n\\t// \u5b9a\u65f6\u653e\u7f6e\u4ee4\u724c\\n\\ttbl.asyncPutTokens()\\n\\treturn tbl\\n}\\n\\n// \u901a\u8fc7\u5c1d\u8bd5put golang.Placeholder \u6765\u8fbe\u5230\u662f\u5426\u6709\u4ee4\u724c\u53ef\u6d88\u8d39\\nfunc (tbl *TokenBucketLimiter) Allow() bool {\\n\\tselect {\\n\\tcase tbl.bucket <- golang.Placeholder:\\n\\t\\treturn true\\n\\tcase <-tbl.doneC.Done():\\n\\t\\treturn false\\n\\tdefault:\\n\\t\\treturn false\\n\\t}\\n}\\n\\nfunc (tbl *TokenBucketLimiter) Close() {\\n\\ttbl.stop()\\n}\\n\\n// \u901a\u8fc7\u6392\u7a7achannel\u8fbe\u5230\u653e\u7f6etoken\u7684\u76ee\u7684\\nfunc (tbl *TokenBucketLimiter) asyncPutTokens() {\\n\\tsafe.GoRun(func() {\\n\\t\\tfor {\\n\\t\\t\\tselect {\\n\\t\\t\\tcase <-tbl.t.C:\\n\\t\\t\\t\\ttbl.drain()\\n\\t\\t\\tcase <-tbl.doneC.Done():\\n\\t\\t\\t\\treturn\\n\\t\\t\\t}\\n\\t\\t}\\n\\t})\\n}\\n\\nfunc (tbl *TokenBucketLimiter) drain() {\\n\\tfor i := 0; i < tbl.limit; i++ {\\n\\t\\tselect {\\n\\t\\tcase <-tbl.bucket:\\n\\t\\tdefault:\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t}\\n}\\n\\n```"}]}')}}]);